import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrGridOptions } from './formatterUtilities';
export var decimalFormatter = function (row, cell, value, columnDef, dataContext, grid) {
    var isNumber = (value === null || value === undefined || value === '') ? false : !isNaN(+value);
    var params = columnDef.params || {};
    var minDecimal = getValueFromParamsOrGridOptions('minDecimal', columnDef, grid, 2);
    var maxDecimal = getValueFromParamsOrGridOptions('maxDecimal', columnDef, grid, 2);
    var displayNegativeNumberWithParentheses = getValueFromParamsOrGridOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    // @deprecated: decimalPlaces, minDecimalPlaces, maxDecimalPlaces
    // add these extra checks to support previous way of passing the decimal count
    if ((params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces)) {
        minDecimal = (params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces);
    }
    if (params.maxDecimalPlaces !== null && params.maxDecimalPlaces) {
        maxDecimal = (params.maxDecimalPlaces !== null && params.maxDecimalPlaces);
    }
    if (isNumber) {
        return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses);
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbEZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9kZWNpbWFsRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV2RSxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBYyxVQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTO0lBQy9ILElBQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xHLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3RDLElBQUksVUFBVSxHQUFHLCtCQUErQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25GLElBQUksVUFBVSxHQUFHLCtCQUErQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25GLElBQU0sb0NBQW9DLEdBQUcsK0JBQStCLENBQUMsc0NBQXNDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUU3SSxpRUFBaUU7SUFDakUsOEVBQThFO0lBQzlFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVILFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDdkk7SUFDRCxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFO1FBQy9ELFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDNUU7SUFFRCxJQUFJLFFBQVEsRUFBRTtRQUNaLE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7S0FDMUY7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMgfSBmcm9tICcuL2Zvcm1hdHRlclV0aWxpdGllcyc7XHJcblxyXG5leHBvcnQgY29uc3QgZGVjaW1hbEZvcm1hdHRlcjogRm9ybWF0dGVyID0gKHJvdzogbnVtYmVyLCBjZWxsOiBudW1iZXIsIHZhbHVlOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBkYXRhQ29udGV4dDogYW55LCBncmlkOiBhbnkpID0+IHtcclxuICBjb25zdCBpc051bWJlciA9ICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJykgPyBmYWxzZSA6ICFpc05hTigrdmFsdWUpO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZi5wYXJhbXMgfHwge307XHJcbiAgbGV0IG1pbkRlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zKCdtaW5EZWNpbWFsJywgY29sdW1uRGVmLCBncmlkLCAyKTtcclxuICBsZXQgbWF4RGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ21heERlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQsIDIpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ2Rpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcycsIGNvbHVtbkRlZiwgZ3JpZCwgZmFsc2UpO1xyXG5cclxuICAvLyBAZGVwcmVjYXRlZDogZGVjaW1hbFBsYWNlcywgbWluRGVjaW1hbFBsYWNlcywgbWF4RGVjaW1hbFBsYWNlc1xyXG4gIC8vIGFkZCB0aGVzZSBleHRyYSBjaGVja3MgdG8gc3VwcG9ydCBwcmV2aW91cyB3YXkgb2YgcGFzc2luZyB0aGUgZGVjaW1hbCBjb3VudFxyXG4gIGlmICgocGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMpIHx8IChwYXJhbXMuZGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMuZGVjaW1hbFBsYWNlcykpIHtcclxuICAgIG1pbkRlY2ltYWwgPSAocGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMpIHx8IChwYXJhbXMuZGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMuZGVjaW1hbFBsYWNlcyk7XHJcbiAgfVxyXG4gIGlmIChwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMubWF4RGVjaW1hbFBsYWNlcykge1xyXG4gICAgbWF4RGVjaW1hbCA9IChwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNOdW1iZXIpIHtcclxuICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIG1pbkRlY2ltYWwsIG1heERlY2ltYWwsIGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufTtcclxuXHJcbiJdfQ==