{"version":3,"sources":["ng://inet-chat/src/model/MessageConstants.ts","ng://inet-chat/src/model/MessageContact.ts","ng://inet-chat/src/DateFormatter.ts","ng://inet-chat/src/model/MessageChat.ts","ng://inet-chat/src/message.service.ts","ng://inet-chat/src/component/contact-list/contact-list.component.ts","ng://inet-chat/src/model/MessageHolder.ts","ng://inet-chat/src/filelist/list/file-list.component.ts","ng://inet-chat/src/video-conference.service.ts","ng://inet-chat/src/open-graph/open-graph.service.ts","ng://inet-chat/src/component/message-chat/message-chat.component.ts","ng://inet-chat/src/component/search-input/search-input.component.ts","ng://inet-chat/src/component/message-panel/message-panel.component.ts","ng://inet-chat/src/filelist/file-format.service.ts","ng://inet-chat/src/filelist/file-ext.pipe.ts","ng://inet-chat/src/filelist/file-icon.pipe.ts","ng://inet-chat/src/filelist/file-list.module.ts","ng://inet-chat/src/component/room-chat/room-chat.component.ts","ng://inet-chat/src/open-graph/link-preview/link-preview.component.ts","ng://inet-chat/src/open-graph/open-graph.module.ts","ng://inet-chat/src/message.module.ts"],"names":["MessageContact","options","this","fullname","usercode","lastmsg","message","online","unread","_indexSearch","Object","assign","_accent","viToEn","toLowerCase","slice","indexOf","prototype","isMatch","keyword","AccentService","moment","_moment","DateFormatter","date","Date","formatFullYear","format","formatYear","formatMonth","formatDate","formatTime","getTime","now","conditions","getFullYear","getMonth","getDate","MessageChat","isSent","attachments","formatter","sent","sender","iNet","username","parseAttachments","displayText","HtmlUtils","formatHtmlDisplay","alert","content","shortTime","longTime","data","k","startsWith","name","canViewInline","test","fileIsImage","url","getPUrl","uuid","push","id","image","ChatMessageService","httpService","socketService","_this","_messageSubject","Subject","_unreadSubject","contacts","messageReceived","asObservable","unreadMessageChange","_instance","_socketObserver","onMessage","subscribe","application","updateLastMessage","next","destroy","unsubscribe","loadFriends","Observable","observer","getJSON","map","item","complete","loadContacts","callback","length","filter","updateUnreadMessage","forEach","friend","getContactByUserCode","i","contact","unshift","hasContact","send","sendEnvelop","envelop","buildEnvelop","address","join","pushMessage","params","formData","convertToFormData","post","alias","body","loadMessages","postJSON","items","total","sort","a","b","resetUnreadMessage","index","splice","typeMessages","split","__mesDisplay","revertMessageDisplay","decodeBase64","str","decodeURIComponent","escape","window","atob","searchContacts","_filterUsers","revertMessage","__index","substring","reconnetSocket","close","checkJoinVideoCall","Injectable","HttpClientService","WebSocketClientService","ContactListComponent","messageService","webSocketService","contactSelected","EventEmitter","roomSelected","callTo","userInteract","lastPage","displayName","_pageNumber","_pageSize","_loading","ngAfterViewInit","_contactEl","$","contactRef","nativeElement","_detectUserInteract","_statusObserver","onStateChange","closed","statusText","connecting","connected","on","e","target","scrollTop","clientHeight","scrollHeight","ngOnDestroy","selectContact","emit","value","trim","_keyword","_contacts","begin","concat","ele","__mes","setTimeout","_timer","setInterval","is","clearInterval","selectRoom","roomName","callToContact","Component","args","selector","template","Output","ViewChild","MessageChatHolder","messages","setHours","display","isSameDate","d","FileListComponent","files","removable","onClick","onRemove","ngOnInit","_initFileEl","clickFile","file","event","removeFile","addFiles","_fileIsImage","_readImageBase64","fileEl","addEventListener","reader","FileReader","readAsDataURL","onload","result","type","Input","VideoConferenceService","domain","messageJoin","app","conferenceID","joined","inAccess","instance","parentNode","audioOnly","height","JitsiMeetExternalAPI","tokenId","roomID","webdata","dispose","width","jwt","startAudioOnly","startWithVideoMuted","api","executeCommand","tones","duration","pause","userName","ErrorMessage","TYPE","isEmpty","tokenId_1","messageJSON","__messageStr_1","encodeBase64","JSON","stringify","getApi","getMessageJoin","getRoomNameByReceiver","receiver","isExistMeet","btoa","unescape","encodeURIComponent","OpenGraphService","regex","loadPreviewLink","link","isLink","ajax","getUrl","success","convertOpenData","error","xhr","loadImageInfo","src","img","Image","onerror","imageInfo","available","landscape","properties","openData","property","MessageChatComponent","openGraphService","videoService","element","audioCall","videoCall","closable","onAudioCall","onVideoCall","onClose","videoPanelVisible","linkRegex","holders","loading","profile","messageJoinCall","_hasMoreMsg","_params","pageSize","pageNumber","_messageObserver","typeMessage","__messageChat","parse","action","joins","messageMissCall","_sendSuccess","messageJoinedCall","messageJoinedCallTo","document","getElementById","style","visibility","opacity","_onDropFile","preventDefault","defineProperty","input","messageBody","scrollBottom","ev","dataTransfer","kind","getAsFile","fileList","ngAfterContentChecked","_scrollNeedUpdate","_lastScrollBottom","ngAfterViewChecked","_onLoad","_onBodyScroll","_scrollingTop","_scrollBottom","_loadMessages","ngOnChanges","changes","firstChange","viewAttachment","open","sendMessage","links","exec","convertLinks","sendMessageSocket","_sendPush","_sendSocket","_clearInput","param","toUpperCase","_addMessages","_scrollToBottom","_focus","focus","messagesArr","insertLast","convertArrayMessage","holder","convertMessages","__messageLink","arrMessage","arr","disposeRoom","joinRoom","querySelector","__user","encapsulation","ViewEncapsulation","None","ElementRef","SearchInputComponent","placeholder","onSearch","onPressed","onChanged","search","keyPressed","key","clear","MessagePanelComponent","chatOpen","readyToChat","_socketSub","_stateChange","_messageSub","count","stateMessage","openVideoCall","openAudioCall","openChatWith","call","messageChatComponent","closeChat","openRoom","callToContactSelected","FILES_FORMAT","FILES_EDIT_FORMAT","FILES_VIEW_FORMAT","FileFormatService","getImagePath","path","commonImageFolder","lastIndex","lastIndexOf","getFileFormatPath","getUrlByExt","ext","getUrlByName","getExtByName","pop","getEditFormats","getViewFormats","FileExtPipe","formatService","transform","Pipe","FileIconPipe","FileListModule","NgModule","imports","CommonModule","declarations","exports","providers","RoomChatComponent","LinkPreviewComponent","onLoad","onDelete","_hidden","loadPreview","openGraphData","setHidden","isPreview","isHidden","setData","title","getData","setLink","removePreView","clearData","getDomain","replace","hidden","OpenGraphModule","ChatMessageModule","FormsModule","CoreModule","AutosizeModule"],"mappings":"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","sourcesContent":["export const APP_CHAT = 'iChat';\n","import {AccentService, HtmlUtils} from \"inet-core\";\n\nexport class MessageContact {\n  private static _accent = new AccentService();\n  fullname: string = '';\n  usercode: string = '';\n  lastmsg: number = 0;\n  message: string = '';\n  online: boolean = false;\n  unread: number = 0;\n  type?: string; // COMPANY | FRIEND\n  _indexSearch: string = '';\n\n  constructor(options) {\n    Object.assign(this, options);\n    // this.message = HtmlUtils.formatHtmlDisplay(this.message);\n\n    this._indexSearch = MessageContact._accent.viToEn(this.fullname.toLowerCase()) + ' ';\n    // Remove suffix email \"@inetcloud.vn\"\n    this._indexSearch += MessageContact._accent.viToEn(this.usercode.slice(0, this.usercode.indexOf('@')));\n  }\n\n  isMatch(keyword: string = '') {\n    return this._indexSearch.indexOf(MessageContact._accent.viToEn(keyword)) > -1;\n  }\n}\n","import * as _moment from 'moment';\nconst moment = _moment;\n\nexport class DateFormatter {\n    date: Date;\n\n    constructor(date: string | Date | number) {\n        this.date = new Date(date);\n    }\n\n    formatFullYear() {\n        return moment(this.date).format('DD/MM/YYYY, H:mm');\n    }\n\n    formatYear() {\n        return moment(this.date).format('DD/MM/YYYY');\n    }\n\n    formatMonth() {\n        return moment(this.date).format('DD/MM, H:mm');\n    }\n\n    formatDate() {\n        return moment(this.date).format('DD/MM, H:mm');\n    }\n\n    formatTime() {\n        return moment(this.date).format('H:mm');\n    }\n\n    format() {\n        if (!this.date.getTime()) {\n            return '';\n        }\n        const now = new Date();\n        const conditions = {\n            onYear: now.getFullYear() === this.date.getFullYear(),\n            onMonth: now.getMonth() === this.date.getMonth(),\n            onDate: now.getDate() === this.date.getDate(),\n        };\n        if (conditions.onYear && conditions.onMonth && conditions.onDate) {\n            return this.formatTime();\n        }\n        if (conditions.onYear && conditions.onMonth) {\n            return this.formatDate();\n        }\n        if (conditions.onYear) {\n            return this.formatMonth();\n        }\n        return this.formatYear();\n    }\n}","import {HtmlUtils, EnvelopBody} from \"inet-core\";\nimport {DateFormatter} from \"../DateFormatter\";\nimport {OpenGraphData} from \"../open-graph\";\n\ndeclare let iNet: any;\n\nexport class MessageChat {\n    message: EnvelopBody;\n    isSent: boolean = false;\n    attachments: any[] = [];\n\n    displayText: string;\n    shortTime: string;\n    longTime: string;\n    date: Date;\n    _openGraph?: OpenGraphData;\n\n    constructor(message: EnvelopBody) {\n        const formatter = new DateFormatter(message.sent || new Date());\n        this.message = message;\n        this.isSent = this.message.sender === iNet.username;\n        this.attachments = MessageChat.parseAttachments(message);\n        this.displayText = HtmlUtils.formatHtmlDisplay(message.message.alert || message.message.content);\n        this.shortTime = formatter.formatTime();\n        this.longTime = formatter.formatFullYear();\n        this.date = formatter.date;\n    }\n\n    static parseAttachments(data: EnvelopBody) {\n        // uuid://5d021cb39278c2c3666081a0\n        var attachments = [];\n        for (const k in data.message) {\n            if (k.startsWith('uuid://')) {\n                var name = data.message[k];\n                var canViewInline = /(png|jpg|jpeg|pdf)$/i.test(name);\n                var fileIsImage = /(png|jpg|jpeg|gif)$/i.test(name);\n                var url = iNet.getPUrl(canViewInline ? 'message/binaryinline' : 'message/binary') +\n                    `?uuid=${data.uuid}&uploadID=${k}`;\n                attachments.push({\n                    url: url,\n                    id: k,\n                    name: name,\n                    image: fileIsImage,\n                    canViewInline: canViewInline\n                });\n            }\n        }\n        return attachments;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClientService, WebSocketClientService} from \"inet-core\";\nimport {APP_CHAT} from \"./model/MessageConstants\";\nimport {MessageContact} from \"./model/MessageContact\";\nimport {Observable, Subject} from \"rxjs\";\nimport {MessageChat} from \"./model/MessageChat\";\nimport { EnvelopBody, WebSocketEnvelop } from 'inet-core/src/websocket/websocket-abstract';\n\ndeclare let iNet: any;\n\n@Injectable()\nexport class ChatMessageService {\n    private static _instance: ChatMessageService = null;\n    private _socketObserver;\n    private _messageSubject = new Subject<MessageChat>();\n    private _unreadSubject = new Subject<number>();\n\n    contacts: MessageContact[] = [];\n    messageReceived = this._messageSubject.asObservable();\n    unreadMessageChange = this._unreadSubject.asObservable();\n\n    constructor(private httpService: HttpClientService,\n                public socketService: WebSocketClientService) {\n        if (ChatMessageService._instance) {\n            return ChatMessageService._instance;\n        }\n        ChatMessageService._instance = this;\n        this._socketObserver = this.socketService.onMessage.subscribe((message: EnvelopBody) => {\n            if (message.application === APP_CHAT) {\n                this.updateLastMessage(message.sender, message);\n                this._messageSubject.next(new MessageChat(message));\n            }\n        });\n\n    }\n\n    destroy(): void {\n        this._socketObserver.unsubscribe();\n        this._messageSubject.unsubscribe();\n        this._unreadSubject.unsubscribe();\n    }\n\n    loadFriends() {\n        return new Observable<MessageContact[]>((observer) => {\n            this.httpService.getJSON(iNet.getPUrl('unifiedpush/list')).subscribe((data) => {\n                observer.next((data || []).map((item) => new MessageContact(item)));\n                observer.complete();\n            });\n        });\n    }\n\n    loadContacts(callback: Function) {\n        if (this.contacts.length > 0) {\n            callback(this.contacts);\n        } else {\n            this.loadFriends().subscribe(\n                (data: MessageContact[]) => {\n                    this.contacts = data.filter((item) => item.usercode !== iNet.usercode);\n                    this.updateUnreadMessage();\n                    callback(this.contacts);\n                }, () => callback([])\n            );\n        }\n    }\n\n    updateUnreadMessage() {\n        let unread = 0;\n        this.contacts.forEach((friend) => unread += friend.unread);\n        this._unreadSubject.next(unread);\n    }\n\n    getContactByUserCode(usercode: string, callback: Function) {\n        if (usercode === 'news-feed' || usercode === iNet.usercode) {\n            return;\n        }\n        this.loadContacts((contacts) => {\n            for (let i = 0; i < contacts.length; i++) {\n                if (contacts[i].usercode === usercode) {\n                    return callback(contacts[i]);\n                }\n            }\n            // contact not exist\n            const contact = new MessageContact({usercode: usercode, fullname: usercode, unread: 1});\n            this.contacts.unshift(contact);\n            callback(contact);\n        });\n    }\n\n    hasContact(usercode: string): boolean {\n        for (let i = 0; i < this.contacts.length; i++) {\n            if (this.contacts[i].usercode === usercode) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    send(username: string, message: string): Promise<boolean> {\n        return this.socketService.send(username, message, APP_CHAT);\n    }\n\n    sendEnvelop(envelop: WebSocketEnvelop): Promise<boolean> {\n        return this.socketService.sendEnvelop(envelop);\n    }\n\n    buildEnvelop(address: string, message: string,join?: string): WebSocketEnvelop {\n        if(join){\n            return this.socketService.buildEnvelop(address, message, APP_CHAT, join);\n\n        }else{\n            return this.socketService.buildEnvelop(address, message, APP_CHAT);\n\n        }\n    }\n\n    pushMessage(params, callback: Function) {\n        const formData = this.httpService.convertToFormData(params);\n        this.httpService.post(iNet.getPUrl('message/upload'), formData).subscribe(\n            (data: EnvelopBody) => {\n                let envelop: WebSocketEnvelop = this.socketService.buildEnvelop(params.alias, params.content, APP_CHAT);\n                envelop.body.message = data.message;\n                envelop.body.message.content = envelop.body.message.alert = params.content;\n                envelop.body.uuid = data.uuid;\n                this.socketService.sendEnvelop(envelop);\n                callback(envelop.body);\n            }\n        );\n    }\n\n    loadMessages(params, callback: Function) {\n        this.httpService.postJSON(iNet.getPUrl('message/query'), params).subscribe((data) => {\n            data = data || {};\n            data.items = data.items || [];\n            data.total = data.total || 0;\n            data.items.sort((a, b) => a.sent - b.sent);\n            data.items = data.items.map((item) => new MessageChat(item));\n            this.resetUnreadMessage(params['sender']);\n            callback(data);\n        });\n    }\n\n    updateLastMessage(usercode: string, message: EnvelopBody) {\n        // Update last message, move contact to first\n        this.getContactByUserCode(usercode, (contact: MessageContact) => {\n            var index = this.contacts.indexOf(contact);\n            if (index > -1) {\n                this.contacts.splice(index, 1);\n            }\n            this.contacts.unshift(contact);\n                let typeMessages =  message.message.alert.split(\":\");\n            if(typeMessages.length >2){\n                    if(typeMessages[0]==='uri_message' && typeMessages[1]==='video_conference'){\n                        contact.message = '<i class=\"fa fa-phone pr-1\" aria-hidden=\"true\"></i> Cuá»c gá»i thoáº¡i';\n                    }\n                    else{\n                        let __mesDisplay =  this.revertMessageDisplay(message.message.alert) || '';\n                        if(typeMessages[0]==='uri_message' && typeMessages[1]==='link_preview'){\n                            contact.message =__mesDisplay;\n                        }\n                    }\n                }else{\n                contact.message = message.message.alert;\n            }\n\n            // contact.message = message.message.alert;\n\n            // Not me send\n            if (message.sender !== iNet.usercode) {\n                contact.unread++;\n                this.updateUnreadMessage();\n            }\n        });\n    }\n    decodeBase64(str: string) {\n        return decodeURIComponent(escape(window.atob(str)));\n    }\n\n    resetUnreadMessage(username: string) {\n        this.getContactByUserCode(username, (contact) => {\n            contact.unread = 0;\n            this.updateUnreadMessage();\n        });\n    }\n\n    searchContacts(keyword: string, callback: Function) {\n        this.loadContacts((contacts: MessageContact[]) => callback(this._filterUsers(keyword, contacts)));\n    }\n\n    private _filterUsers(keyword: string, contacts: MessageContact[]) {\n        if (!keyword) {\n            return contacts;\n        }\n        return contacts.filter((item) => item.isMatch(keyword));\n    }\n\n    revertMessage(message: string){\n        let __index = message.indexOf(\"uri_message\") || 0;\n       return  message.substring(__index);\n    }\n    revertMessageDisplay(message: string){\n        let __index = message.indexOf(\"uri_message\") || 0;\n        return  message.substring(0,__index);\n    }\n\n    reconnetSocket(){\n        this.socketService.close();\n    }\n\n    checkJoinVideoCall(message){\n    }\n}\n","import {AfterViewInit, Component, ElementRef, EventEmitter, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\nimport {MessageContact} from \"../../model/MessageContact\";\nimport {Subscription} from \"rxjs\";\nimport {ChatMessageService} from \"../../message.service\";\nimport {MessageChat} from \"../../model/MessageChat\";\nimport {WebSocketClientService} from \"inet-core\";\n\ndeclare let $: any;\ndeclare let iNet: any;\n\n@Component({\n    selector: 'message-contact-list',\n    templateUrl: './contact-list.component.html',\n    styleUrls: ['./contact-list.component.css']\n})\nexport class ContactListComponent implements OnDestroy, AfterViewInit {\n    @Output() contactSelected = new EventEmitter<MessageContact>();\n    @Output() roomSelected = new EventEmitter<string>();\n    @Output() callTo = new EventEmitter<string>();\n    @ViewChild('contactRef') contactRef: ElementRef;\n    contacts: MessageContact[] = [];\n    statusText: string;\n    userInteract: boolean = false;\n    lastPage: boolean = false;\n    username =  iNet.username;\n    fullname =  iNet.displayName;\n\n    private _contacts: MessageContact[];\n    private _statusObserver: Subscription;\n    private _pageNumber: number = 0;\n    private _pageSize: number = 20;\n    private _loading: boolean = false;\n    private _timer;\n    private _contactEl;\n    private _keyword;\n    private _messageObserver;\n\n\n\n    constructor(private messageService: ChatMessageService, private webSocketService: WebSocketClientService) {\n    }\n\n    ngAfterViewInit() {\n        this._contactEl = $(this.contactRef.nativeElement);\n        this._detectUserInteract();\n        this.searchContacts();\n        this._statusObserver = this.messageService.socketService.onStateChange.subscribe(() => {\n            if (this.messageService.socketService.closed) {\n                this.statusText = 'Káº¿t ná»i khÃ´ng thÃ nh cÃ´ng';\n            } else if (this.messageService.socketService.connecting) {\n                this.statusText = 'Äang káº¿t ná»i';\n            } else if (this.messageService.socketService.connected) {\n                this.statusText = '';\n            }\n        });\n\n        // Scroll bottom load more\n        this._contactEl.on('scroll', (e) => {\n            if (this._loading || this.lastPage) {\n                return;\n            }\n            if (e.target.scrollTop + e.target.clientHeight > e.target.scrollHeight - 100) {\n                this.loadContacts();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n\n        if (this._statusObserver) {\n            this._statusObserver.unsubscribe();\n            this._statusObserver = null;\n        }\n    }\n\n    selectContact(contact: MessageContact) {\n        this.contactSelected.emit(contact);\n    }\n\n    searchContacts(value: string = '') {\n        value = value.toLowerCase().trim();\n        if (value === this._keyword) {\n            return;\n        }\n        this._keyword = value;\n        this.messageService.searchContacts(value, (contacts) => {\n            this._pageNumber = 0;\n            this._loading = false;\n            this._contacts = contacts;\n            this.contacts.length = 0;\n            this.loadContacts();\n        });\n    }\n\n    loadContacts() {\n        if (!this.userInteract || this._loading || !this._contacts) {\n            return;\n        }\n        const begin = this._pageNumber * this._pageSize;\n        this.lastPage = this._contacts && this._contacts.length < begin;\n        if (this.lastPage) {\n            return;\n        }\n        this._loading = true;\n        this.contacts = this.contacts.concat(this._contacts.slice(begin, begin + this._pageSize));\n\n        this.contacts.forEach(ele=>{\n            let __mes =  this.messageService.revertMessage(ele.message) || '';\n            let __mesDisplay =  this.messageService.revertMessageDisplay(ele.message) || '';\n            let typeMessages =  __mes.split(\":\")\n            if(typeMessages.length >0){\n                if(typeMessages[0]==='uri_message' && (typeMessages[1]==='video_conference...' || typeMessages[1]==='video_conference') ){\n                        ele.message = '<i class=\"fa fa-phone pr-1\" aria-hidden=\"true\"></i> Cuá»c gá»i thoáº¡i';\n                        return ele;\n                }\n                else{\n                    if(typeMessages[0]==='uri_message' && typeMessages[1]==='link_preview...'){\n                        ele.message =__mesDisplay;\n                        return ele;\n                    }else{\n                        return ele;\n                    }\n                }\n            }\n        })\n        setTimeout(() => {\n            this._loading = false;\n            this._pageNumber++;\n        }, 300);\n        this.selectContact(this.contacts[0]);\n    }\n    decodeBase64(str: string) {\n        return decodeURIComponent(escape(window.atob(str)));\n    }\n\n    private _detectUserInteract() {\n        this._timer = setInterval(() => {\n            if (this._contactEl.is(':visible')) {\n                this.userInteract = true;\n                this.loadContacts();\n                clearInterval(this._timer);\n                this._timer = null;\n            }\n        }, 100);\n    }\n\n\n    selectRoom(roomName: string) {\n        this.roomSelected.emit(roomName);\n    }\n    callToContact(usercode){\n        this.callTo.emit(usercode);\n    }\n}\n","import {MessageChat} from \"./MessageChat\";\nimport {DateFormatter} from \"../DateFormatter\";\n\nexport class MessageChatHolder {\n    messages: MessageChat[] = [];\n    date: Date;\n    display: string;\n\n    constructor(date) {\n        this.date = new Date(date);\n        this.date.setHours(0, 0, 0, 0);\n        this.display = new DateFormatter(this.date).formatYear();\n    }\n\n    isSameDate(date: Date) {\n        let d = new Date(date);\n        d.setHours(0, 0, 0, 0);\n        return this.date.getTime() === d.getTime();\n    }\n}","import {Component, EventEmitter, Input, OnInit, Output, TemplateRef} from '@angular/core';\n\n@Component({\n    selector: 'file-list',\n    templateUrl: './file-list.component.html',\n    styleUrls: ['./file-list.component.css']\n})\nexport class FileListComponent implements OnInit {\n    @Input() fileEl: HTMLInputElement;\n    @Input() files: FileListItem[] = [];\n    @Input() removable: boolean = true;\n    @Input() template: TemplateRef<any>;\n\n    @Output() onClick = new EventEmitter<any>();\n    @Output() onRemove = new EventEmitter<FileListItem>();\n\n    ngOnInit(): void {\n        this._initFileEl();\n    }\n\n    clickFile(file: FileListItem, event) {\n        this.onClick.emit({file, event});\n    }\n\n    removeFile(file: FileListItem) {\n        const index = this.files.indexOf(file);\n        if (index > -1) {\n            this.files.splice(index, 1);\n            this.onRemove.emit(file);\n        }\n    }\n\n    addFiles(files: FileList | File[]) {\n        // Read as base64 if image\n        for (let i  = 0; i < files.length; i++) {\n            let file = files[i];\n            if (this._fileIsImage(file)) {\n                file['image'] = true;\n                this._readImageBase64(file);\n            }\n            this.files.push(file);\n        }\n    }\n\n    private _initFileEl() {\n        if (this.fileEl) {\n            this.fileEl.addEventListener('change', (e) => {\n                const files = this.fileEl.files;\n                if (files.length > 0) {\n                    // Read as base64 if image\n                    this.addFiles(files);\n\n                    // Reset file\n                    this.fileEl.value = '';\n                }\n            });\n        }\n    }\n\n    private _readImageBase64(file) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function() {\n            file.url = reader.result;\n        };\n    }\n\n    private _fileIsImage(file: FileListItem) {\n        return file.type && file.type.indexOf('image') > -1;\n    }\n}\n\nexport interface FileListItem extends File {\n    id?: string;\n    url?: string;\n    image?: boolean;\n}\n","import {Injectable} from '@angular/core';\nimport {ErrorMessage, HttpClientService} from \"inet-core\";\ndeclare var JitsiMeetExternalAPI: any;\ndeclare let iNet: any;\n\n@Injectable()\nexport class VideoConferenceService {\n    api: any;\n    domain=  'jitsi.inetcloud.vn';\n    messageJoin = {app:'iChat', conferenceID:'', sender : '', joined: '', inAccess: ''};\n\n    static instance: VideoConferenceService = null;\n    constructor(private httpService: HttpClientService) {\n        return VideoConferenceService.instance = VideoConferenceService.instance || this;\n    }\n\n    join(parentNode: any, roomName: string, audioOnly: boolean = false, height: number = 350,callback?: Function) {\n        if(!JitsiMeetExternalAPI) {\n            return;\n        }\n        let tokenId ='';\n        this.httpService.postJSON(iNet.getPUrl('conference/authorized'), {roomID : roomName}).subscribe((data) => {\n            tokenId =  data.webdata || '';\n            this.dispose();\n            const options = {\n                roomName: roomName,\n                width: '100%',\n                height: '100%',\n                parentNode: parentNode,\n                jwt: tokenId\n\n            };\n            if(audioOnly) {\n                options.height = '100%';\n                options['configOverwrite'] = {\n                    startAudioOnly: true,\n                    startWithVideoMuted: true\n                }\n            }\n\n            this.api = new JitsiMeetExternalAPI( this.domain, options);\n            if(callback){\n                callback(this.api);\n            }\n            this.api.executeCommand('sendTones', {\n                tones: '12345#', // The dial pad touch tones to play. For example, '12345#'.\n                duration: 200, // Optional. The number of milliseconds each tone should play. The default is 200.\n                pause: 200 // Optional. The number of milliseconds between each tone. The default is 200.\n            });\n\n            // this.api.executeCommand('displayName', iNet.displayName);\n            // this.api.executeCommand('email', iNet.username);\n            // this.api.executeCommand('setVideoQuality', 720);\n        });\n\n\n        /*\n        this.api.addEventListener('readyToClose',  ()=> {\n            this.dispose();\n        });\n\n         */\n    }\n    callTo(parentNode: any,userName: string,audioOnly: boolean = false, height: number = 350,callback?: Function) {\n        let conferenceID ='';\n        this.httpService.postJSON(iNet.getPUrl('conference/end2end'), {callTo : userName}).subscribe((data) => {\n            if(data.type !== ErrorMessage.TYPE){\n                conferenceID =  data.conferenceID || '';\n                if (!iNet.isEmpty(conferenceID)) {\n                    if(!JitsiMeetExternalAPI) {\n                        return;\n                    }\n                    let tokenId ='';\n                    let messageJSON ={sender : iNet.username,conferenceID:conferenceID};\n                    let __messageStr = 'uri_message:video_conference:'+this.encodeBase64(JSON.stringify(messageJSON)) || '';\n                    // this.chatMessageService.send(userName,__messageStr);\n                    this.httpService.postJSON(iNet.getPUrl('conference/authorized'), {roomID : conferenceID}).subscribe((data) => {\n                        tokenId =  data.webdata || '';\n                        this.dispose();\n                        const options = {\n                            roomName: conferenceID,\n                            width: '100%',\n                            height: '100%',\n                            parentNode: parentNode,\n                            jwt: tokenId\n\n                        };\n                        if(audioOnly) {\n                            options.height = '100%';\n                            options['configOverwrite'] = {\n                                startAudioOnly: true,\n                                startWithVideoMuted: true\n                            }\n                        }\n\n                        this.api = new JitsiMeetExternalAPI( this.domain, options);\n                        this.messageJoin.sender =iNet.username;\n                        this.messageJoin.conferenceID =  conferenceID;\n\n                        if(callback){\n                            callback(this.api, __messageStr);\n                        }\n                        this.api.executeCommand('sendTones', {\n                            tones: '12345#', // The dial pad touch tones to play. For example, '12345#'.\n                            duration: 200, // Optional. The number of milliseconds each tone should play. The default is 200.\n                            pause: 200 // Optional. The number of milliseconds between each tone. The default is 200.\n                        });\n                        // this.api.executeCommand('displayName', iNet.displayName);\n                        // this.api.executeCommand('email', iNet.username);\n                        // this.api.executeCommand('setVideoQuality', 720);\n                    });\n                }\n            }\n        });\n\n\n        /*\n        this.api.addEventListener('readyToClose',  ()=> {\n            this.dispose();\n        });\n\n         */\n    }\n\n\n    getApi() {\n        return this.api;\n    }\n\n    dispose(){\n        if (this.api) {\n            this.api.dispose();\n            delete this.api;\n        }\n    }\n\n    getMessageJoin(){\n        return this.messageJoin;\n    }\n\n    getRoomNameByReceiver(receiver: string): string {\n        return iNet.username.split('@')[0] + '_' + receiver.split('@')[0];\n    }\n\n    isExistMeet() {\n       return !!JitsiMeetExternalAPI;\n    }\n    encodeBase64(str: string) {\n        return window.btoa(unescape(encodeURIComponent(str)));\n    }\n}\n\n","import { Injectable } from '@angular/core';\nimport {OpenGraphData, OpenGraphImageInfo} from \"./model/OpenGraphData\";\ndeclare let iNet: any;\ndeclare let $: any;\n\n@Injectable()\nexport class OpenGraphService {\n\n  private regex = /(https?:\\/\\/[^\\s]+)/;\n\n  constructor() { }\n\n  loadPreviewLink(link: string, callback: Function) {\n    if (!link) {\n      callback(null, {\n        error: 'Link is empty'\n      });\n      return;\n    }\n    if (!this.isLink(link)) {\n      callback(null, {\n        error: 'Link invalid'\n      });\n      return;\n    }\n\n    $.ajax({\n      type: 'post',\n      url: iNet.getUrl('opengraph/fetch'),\n      data: {\n       url: link\n      },\n      success: (data) => {\n         callback(this.convertOpenData(data, link));\n      },\n      error: function (xhr) {\n        callback(null, xhr);\n      }\n    });\n  }\n\n  isLink(link: string): boolean {\n    return this.regex.test(link);\n  }\n\n  loadImageInfo(src: string, callback: Function) {\n    let img = new Image();\n    img.onload = img.onerror = function (e) {\n      let imageInfo: OpenGraphImageInfo = {\n        width: img.width,\n        height: img.height\n      };\n      if (imageInfo.width && imageInfo.height) {\n        imageInfo.available = true;\n        imageInfo.landscape = imageInfo.width / imageInfo.height > 1.1;\n      }\n      callback(imageInfo);\n    };\n    img.src = src;\n  }\n\n  private convertOpenData(properties: any[], url: string): OpenGraphData {\n    if (properties.length < 1) {\n      return;\n    }\n    let openData = <OpenGraphData>{};\n\n    properties.forEach((item) => {\n      openData[item.property] = item.content;\n    });\n\n    if (!openData.url) {\n      openData.url = url;\n    }\n\n    return openData;\n  }\n}\n","import {\n    AfterContentChecked,\n    AfterViewChecked,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {MessageContact} from \"../../model/MessageContact\";\nimport {APP_CHAT} from \"../../model/MessageConstants\";\nimport {MessageChat} from \"../../model/MessageChat\";\nimport {ChatMessageService} from \"../../message.service\";\nimport {MessageChatHolder} from \"../../model/MessageHolder\";\nimport {FileListComponent, FileListItem} from \"../../filelist/list/file-list.component\";\nimport {EnvelopBody} from 'inet-core';\nimport {VideoConferenceService} from \"../../video-conference.service\";\nimport { OpenGraphService } from '../../open-graph/open-graph.service';\n\ndeclare let iNet: any;\n// declare let $: any;\n// import {ifvisible} from \"ifvisible.js\"\n\n@Component({\n    selector: 'message-chat',\n    templateUrl: './message-chat.component.html',\n    styleUrls: ['./message-chat.component.css'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class MessageChatComponent implements OnInit, OnChanges, OnDestroy, AfterViewChecked, AfterContentChecked {\n    @Input() username: string;\n    @Input() audioCall: boolean = false;\n    @Input() videoCall: boolean = false;\n    @Input() closable: boolean = false;\n    @Output() onAudioCall = new EventEmitter<MessageContact>();\n    @Output() onVideoCall = new EventEmitter<MessageContact>();\n    @Output() onClose = new EventEmitter<MessageContact>();\n    @ViewChild('input') input: ElementRef;\n    @ViewChild('messageBody') messageBody: ElementRef;\n    @ViewChild('fileList') fileList: FileListComponent;\n    videoPanelVisible: boolean = false;\n    private linkRegex = /(https?:\\/\\/[^\\s]+)/;\n    contact: MessageContact;\n    holders: MessageChatHolder[] = [];\n    files: any[] = [];\n    loading: boolean = true;\n    profile = iNet.username;\n    messageJoinCall = {};\n    // @ViewChild(LinkPreviewComponent) linkPreview: LinkPreviewComponent;\n\n    get canSend(): boolean {\n        return this.files.length > 0 || this.message.length > 0;\n    }\n\n    get message(): string {\n        return this.input && this.input.nativeElement.value.trim() || '';\n    }\n\n    get scrollTop(): number {\n        return this.messageBody.nativeElement.scrollTop;\n    }\n\n    set scrollTop(scrollTop: number) {\n        this.messageBody.nativeElement.scrollTop = scrollTop;\n    }\n\n    get scrollHeight(): number {\n        return this.messageBody.nativeElement.scrollHeight;\n    }\n\n    get scrollBottom(): number {\n        return this.scrollHeight - this.messageBody.nativeElement.scrollTop;\n    }\n\n    set scrollBottom(scrollBottom: number) {\n        this.scrollTop = this.scrollHeight - scrollBottom;\n    }\n\n    private _scrollingTop: boolean;\n    private _scrollBottom: number;\n    private _lastScrollBottom: number;\n    private _scrollNeedUpdate: boolean;\n    private _hasMoreMsg: boolean = false;\n    private _messageObserver;\n    private __messageChat;\n\n    private _params: any = {\n        pageSize: 20,\n        pageNumber: 0\n    };\n\n    constructor(\n        private openGraphService: OpenGraphService,\n        private messageService: ChatMessageService,\n        private videoService: VideoConferenceService,\n        private element: ElementRef\n    ) {\n        this._messageObserver = this.messageService.messageReceived.subscribe((message: MessageChat) => {\n            if (message.message.sender !== iNet.username) {\n                if (message.message.sender === this.username) {\n                    if (message.message.message.alert) {\n                        let typeMessage = message.message.message.alert.split(\":\");\n                        if (typeMessage[0] === 'uri_message') {\n                            if (typeMessage[1] === 'video_conference' && !iNet.isEmpty(typeMessage[2])) {\n                                this.__messageChat = JSON.parse(this.decodeBase64(typeMessage[2])) || {};\n                                if (this.__messageChat.action === 'END') {\n                                    if (message.message.message.joins.split(',').length === 1) {\n                                        message.displayText = this.messageMissCall();\n                                        this._sendSuccess(message);\n                                    } else {\n                                        message.displayText = this.messageJoinedCall(message.message.message.duration);\n                                        this._sendSuccess(message);\n                                    }\n                                }\n                                if (this.__messageChat.action === 'LEFT' && message.message.message.joins.split(',')[0] === iNet.username) {\n                                    if (message.message.message.joins.split(',').length === 1) {\n                                        message.displayText = this.messageMissCall();\n                                        message.message.sender = message.message.message.joins.split(',')[0];\n                                        message.message.message.joins.split(',')[0] === iNet.username ? message.isSent = true : message.isSent = false;\n                                        this._sendSuccess(message);\n                                    } else {\n                                        message.displayText = this.messageJoinedCallTo(message.message.message.duration);\n                                        message.message.sender = message.message.message.joins.split(',')[0];\n                                        message.message.message.joins.split(',')[0] === iNet.username ? message.isSent = true : message.isSent = false;\n                                        this._sendSuccess(message);\n                                    }\n                                }\n                            }\n                        } else {\n                            this._sendSuccess(message);\n                        }\n                    }\n                } else {\n                    this.messageService.updateLastMessage(this.username, message.message);\n                    this.messageService.resetUnreadMessage(this.username);\n                }\n\n            } else {\n                let typeMessage = message.message.message.alert.split(\":\");\n                if (typeMessage[0] === 'uri_message') {\n                    if (typeMessage[1] === 'video_conference' && !iNet.isEmpty(typeMessage[2])) {\n                        this.__messageChat = JSON.parse(this.decodeBase64(typeMessage[2])) || {};\n                        if (this.__messageChat.action === 'JOIN') {\n                        } else {\n                            if (this.__messageChat.action === 'LEFT') {\n                                this.videoService.dispose();\n                                document.getElementById(\"meet\").style.visibility = \"hidden\";\n                                this._sendSuccess(message);\n                            }\n                        }\n                    }\n                }\n            }\n            // if (message.message.sender === this.username) {\n            // }\n        });\n        this.element.nativeElement.addEventListener('drop', (e) => {\n            this.element.nativeElement.style.opacity = '1';\n            this._onDropFile(e);\n        });\n        this.element.nativeElement.addEventListener('dragleave', (e) => {\n            this.element.nativeElement.style.opacity = '1';\n        });\n        this.element.nativeElement.addEventListener('dragover', (e) => {\n            this.element.nativeElement.style.opacity = '.5';\n            e.preventDefault();\n        });\n    }\n\n    private _onDropFile(ev) {\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n        let files;\n        if (ev.dataTransfer.items) {\n            files = [];\n            // Use DataTransferItemList interface to access the file(s)\n            for (var i = 0; i < ev.dataTransfer.items.length; i++) {\n                // If dropped items aren't files, reject them\n                if (ev.dataTransfer.items[i].kind === 'file') {\n                    files.push(ev.dataTransfer.items[i].getAsFile());\n                }\n            }\n        } else {\n            files = ev.dataTransfer.files;\n        }\n        if (files.length > 0) {\n            this.fileList.addFiles(files);\n        }\n    }\n\n    ngAfterContentChecked() {\n        // Collect scroll position before render new messages\n        if (this._scrollNeedUpdate) {\n            this._lastScrollBottom = this.scrollBottom;\n        }\n    }\n\n    ngAfterViewChecked() {\n        // Restore scroll position after render new messages if not match\n        if (this._scrollNeedUpdate) {\n            let scrollBottom = this.scrollBottom;\n            this._scrollNeedUpdate = false;\n            if (this._lastScrollBottom != scrollBottom) {\n                // Restore last scrollBottom\n                this.scrollBottom = this._lastScrollBottom;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this._onLoad();\n        // ifvisible.on(\"focus\", () => {\n        //     if (ifvisible.now()) {\n        //         this._params.pageNumber = 0;\n        //         this._onLoad();\n        //         // this.messageService.reconnetSocket();\n        //     }\n        // });\n        this.messageBody.nativeElement.addEventListener('scroll', () => this._onBodyScroll());\n        if (!this.videoService.isExistMeet()) {\n            this.videoPanelVisible = false;\n        }\n\n    }\n\n    private _onBodyScroll() {\n        const scrollBottom = this.scrollBottom;\n        this._scrollingTop = this._scrollBottom <= scrollBottom;\n        this._scrollBottom = scrollBottom;\n        if (this.loading || !this._hasMoreMsg) {\n            return;\n        }\n        // scroll to top\n        if (this._scrollingTop && this.scrollTop < 150) {\n            this._loadMessages();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.username && !changes.username.firstChange) {\n            this._onLoad();\n            this.messageJoinCall['joined'] = false;\n        }\n    }\n\n    ngOnDestroy() {\n        this._messageObserver.unsubscribe();\n    }\n\n    viewAttachment(e: { file: FileListItem }) {\n        window.open(e.file.url, '_blank');\n    }\n\n    sendMessage() {\n        let value = this.message.trim();\n        let __mes = this.messageService.revertMessage(value) || '';\n        // let __mesDisplay = this.messageService.revertMessageDisplay(value) || '';\n        let links = this.linkRegex.exec(__mes);\n        if (links && links.length > 0) {\n            this.openGraphService.loadPreviewLink(this.message, (data) => {\n                value = this.encodeBase64(JSON.stringify(this.convertLinks(data)))\n                this.sendMessageSocket('uri_message:link_preview:' + value);\n            })\n        } else {\n            this.sendMessageSocket(value);\n        }\n\n    }\n\n    sendMessageSocket(value) {\n        if (value || this.files.length > 0) {\n            if (this.files.length > 0) {\n                this._sendPush(value);\n            } else {\n                this._sendSocket(value);\n            }\n            this._clearInput();\n        }\n    }\n\n    convertLinks(data) {\n        let param = {};\n        param['title'] = data['title'];\n        param['image'] = data['image'];\n        param['description'] = data['description'];\n        param['url'] = data['url'];\n        param['finalUrl'] = data['site_name'].toUpperCase();\n        return param;\n    }\n\n\n    private _loadMessages() {\n        this.loading = true;\n        this._hasMoreMsg = false;\n        this.messageService.loadMessages(this._params, (result) => {\n            // this.messages = result.items.concat(this.messages);\n            this._addMessages(result.items);\n            if (this._params.pageNumber === 0) {\n                this._scrollToBottom();\n            }\n            this._scrollNeedUpdate = true;\n            this._params.pageNumber += 1;\n            this._hasMoreMsg = this._params.pageSize * this._params.pageNumber < result.total;\n            setTimeout(() => {\n                this.loading = false;\n                this._onBodyScroll();\n            }, 500);\n        });\n    }\n\n    private _focus() {\n        this.input.nativeElement.focus();\n    }\n\n    private _scrollToBottom() {\n        setTimeout(() => {\n            this.scrollTop = this.scrollHeight;\n        }, 100);\n    }\n\n    private _clearInput() {\n        this.files.length = 0;\n        this.input.nativeElement.value = '';\n        this._focus();\n    }\n\n    private _addMessages(messagesArr: MessageChat[], insertLast: boolean = false) {\n        let messages = this.convertArrayMessage(JSON.stringify(messagesArr));\n        messages.sort((a, b) => b.date.getTime() - a.date.getTime());\n        messages.forEach((message) => {\n            let holder;\n            for (let i = 0; i < this.holders.length; i++) {\n                if (this.holders[i].isSameDate(message.date)) {\n                    holder = this.holders[i];\n                    break;\n                }\n            }\n            if (!holder) {\n                holder = new MessageChatHolder(message.date);\n                if (insertLast) {\n                    this.holders.push(holder);\n                } else {\n                    this.holders.unshift(holder);\n                }\n            }\n            if (insertLast) {\n                holder.messages.push(message);\n            } else {\n                holder.messages.unshift(message);\n            }\n        });\n    }\n\n\n    private convertMessages(messages) {\n        if (!iNet.isEmpty(messages)) {\n            let __mes = this.messageService.revertMessage(messages.displayText) || '';\n            let __mesDisplay = this.messageService.revertMessageDisplay(messages.displayText) || '';\n            let typeMessages = __mes.split(\":\");\n            if (typeMessages.length >= 2) {\n                if (typeMessages[0] === 'uri_message' && typeMessages[1] === 'video_conference') {\n                    let __messageChat = JSON.parse(this.decodeBase64(typeMessages[2])) || {};\n                    if (messages.message.sender === this.username) {\n                        if (__messageChat.action === 'END') {\n                            if (messages.message.message.joins.split(',').length === 1) {\n                                messages.displayText = this.messageMissCall();\n                                return messages;\n                            } else {\n                                messages.displayText = this.messageJoinedCall(messages.message.message.duration);\n                                return messages;\n                            }\n                        }\n                        if (__messageChat.action === 'LEFT' && messages.message.message.joins.split(',')[0] === messages.message.sender) {\n                            if (messages.message.message.joins.split(',').length === 1) {\n                                messages.displayText = this.messageMissCall();\n                                return messages;\n                            } else {\n                                messages.displayText = this.messageJoinedCall(messages.message.message.duration);\n                                return messages;\n                            }\n                        } else {\n                            return messages;\n                        }\n\n                    } else {\n                        if (__messageChat.action === 'END') {\n                            if (messages.message.message.joins.split(',').length === 1) {\n                                messages.displayText = this.messageMissCall();\n                                return messages;\n                            } else {\n                                messages.displayText = this.messageJoinedCallTo(messages.message.message.duration);\n                                return messages;\n                            }\n                        } else {\n                            if (this.messageJoinCall['joined']) {\n                                messages.displayText = this.messageJoinedCallTo(messages.message.message.duration);\n                                return messages;\n                            } else {\n                                messages.displayText = this.messageMissCall();\n                                return messages;\n                            }\n                        }\n\n                    }\n                } else {\n                    if (typeMessages[0] === 'uri_message' && typeMessages[1] === 'link_preview') {\n                        let __messageLink = JSON.parse(this.decodeBase64(typeMessages[2])) || {};\n                        messages['_openGraph'] = __messageLink;\n                        messages.displayText = __mesDisplay;\n                        return messages;\n                    } else {\n                        return messages;\n                    }\n                }\n            } else {\n                return messages;\n            }\n        }\n    }\n\n    messageMissCall(){\n        // $('.message-chat__miss').on('click',()=>{\n        //     console.log('click')\n        //     this.joinRoom(true);\n        // })\n        return  '<div class=\"contact d-flex my-1\" role=\"button\" style=\"\">\\n' +\n            '    <i class=\"message-chat__miss fa fa-phone ml-0\"></i>\\n' +\n            '    <div class=\"contact-content pl-2\">\\n' +\n            '        <div class=\"contact-name mb-1\">Cuá»c gá»i bá» nhá»¡</div>\\n' +\n            '        <div class=\"contact-detail\">Gá»i láº¡i</div>\\n' +\n            '    </div>\\n' +\n            '</div>'\n    }\n    messageJoinedCall(duration){\n        return  '<div class=\"contact d-flex my-1\" role=\"button\" style=\"\">\\n' +\n        '    <i class=\"message-chat__action fa fa-phone ml-0\"></i>\\n' +\n        '    <div class=\"contact-content pl-2\">\\n' +\n        '        <div class=\"contact-name mb-1\">Cuá»c gá»i thoáº¡i Äáº¿n</div>\\n' +\n        '        <div class=\"contact-detail\">' + duration + ' giÃ¢y' + '</div>\\n' +\n        '    </div>\\n' +\n        '</div>'\n    }\n    messageJoinedCallTo(duration){\n        return  '<div class=\"contact d-flex my-1\" role=\"button\" style=\"\">\\n' +\n            '    <i class=\"message-chat__action fa fa-phone ml-0\"></i>\\n' +\n            '    <div class=\"contact-content pl-2\">\\n' +\n            '        <div class=\"contact-name mb-1\">Cuá»c gá»i thoáº¡i Äi</div>\\n' +\n            '        <div class=\"contact-detail\">' + duration + ' giÃ¢y' + '</div>\\n' +\n            '    </div>\\n' +\n            '</div>'\n    }\n\n\n    private convertArrayMessage(arrMessage) {\n        let arr = JSON.parse(arrMessage);\n        arr.forEach(ele => {\n            ele = this.convertMessages(ele);\n            ele.date = new Date(ele.date);\n            return ele;\n        });\n        return arr;\n    }\n\n    encodeBase64(str: string) {\n        return window.btoa(unescape(encodeURIComponent(str)));\n    }\n\n    decodeBase64(str: string) {\n        return decodeURIComponent(escape(window.atob(str)));\n    }\n\n    private _onLoad() {\n        this.disposeRoom();\n        this._params.sender = this.username;\n        this._params.pageNumber = 0;\n        this._hasMoreMsg = false;\n        this.holders = [];\n        this.loading = true;\n        this.files.length = 0;\n        this.messageService.getContactByUserCode(this.username, (contact) => this.contact = contact);\n        setTimeout(() => {\n            this._loadMessages();\n            this._focus();\n        }, 500);\n    }\n\n    private _sendSocket(value: string) {\n        const envelop = this.messageService.buildEnvelop(this.username, value);\n        this.messageService.sendEnvelop(envelop);\n        this._sendSuccess(new MessageChat(envelop.body));\n    }\n\n    private _sendPush(value: string) {\n        var params = {\n            content: value,\n            alert: value,\n            application: APP_CHAT,\n            alias: this.username,\n        };\n        this.files.forEach(function (file, i) {\n            params['file-' + i] = file;\n        });\n        this.messageService.pushMessage(params, (message: EnvelopBody) => {\n            if (message) {\n                this._sendSuccess(new MessageChat(message));\n            }\n        });\n    }\n\n    private _sendSuccess(message: MessageChat) {\n        this._addMessages([this.convertMessages(message)], true);\n        this.messageService.updateLastMessage(this.username, message.message);\n        this.messageService.resetUnreadMessage(this.username);\n        this._scrollToBottom();\n    }\n\n    joinRoom(audioOnly: boolean, usercode?: string) {\n        this.videoPanelVisible = false;\n        this.messageJoinCall['joined'] = false;\n        if (!this.videoService.isExistMeet()) {\n            this.messageJoinCall['joined'] = false;\n            return;\n        }\n        const element = document.querySelector('#meet');\n        document.getElementById(\"meet\").style.visibility = \"visible\";\n            let __user = '';\n            if(!!usercode){\n                __user = usercode;\n            }else{\n                __user =  this.contact.usercode\n            }\n        this.videoService.callTo(element, __user, audioOnly, 350, (api, messages) => {\n            api.addEventListener('readyToClose', () => {\n                this.videoService.dispose();\n                document.getElementById(\"meet\").style.visibility = \"hidden\";\n                // this.messageService.sendEnvelop(envelop);\n                if (!this.messageJoinCall['joined']) {\n                    const envelop = this.messageService.buildEnvelop(this.username, messages);\n                    this._sendSuccess(new MessageChat(envelop.body));\n\n                }\n                // else{\n                //     let __joins = [iNet.username,this.username];\n                //     const envelop = this.messageService.buildEnvelop(this.username, messages,__joins.join(',') )\n                //     console.log('envelop',envelop,__joins.join(','))\n                //     this._sendSuccess(new MessageChat(envelop.body));\n                // }\n            });\n            api.addEventListener('videoConferenceJoined', () => {\n                this.messageJoinCall = this.videoService.getMessageJoin();\n                this.messageJoinCall['joined'] = true;\n            });\n        });\n\n    }\n\n    disposeRoom() {\n        this.videoPanelVisible = true;\n        this.videoService.dispose();\n    }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'search-input',\n  templateUrl: './search-input.component.html',\n  styleUrls: ['./search-input.component.css']\n})\nexport class SearchInputComponent {\n  @Input() placeholder: string = '';\n  @Input() keyword: string = '';\n  @Output() onSearch = new EventEmitter<string>();\n  @Output() onPressed = new EventEmitter<KeyboardEvent>();\n  @Output() onChanged = new EventEmitter<string>();\n\n  search() {\n    this.onSearch.emit(this.keyword);\n  }\n\n  keyPressed(e: KeyboardEvent) {\n    this.onPressed.emit(e);\n    if (e.key === 'Enter') {\n      this.search();\n    }\n    this.onChanged.emit(this.keyword);\n  }\n\n  clear() {\n    this.keyword = '';\n    this.onChanged.emit(this.keyword);\n  }\n}\n","import {Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {MessageContact} from \"../../model/MessageContact\";\nimport {ChatMessageService} from \"../../message.service\";\nimport { MessageChatComponent } from '../message-chat/message-chat.component';\n\n\n@Component({\n  selector: 'message-panel',\n  templateUrl: './message-panel.component.html',\n  styleUrls: ['./message-panel.component.css']\n})\nexport class MessagePanelComponent implements OnDestroy {\n  @Input() audioCall: boolean = true;\n  @Input() videoCall: boolean = true;\n  @Input() closable: boolean = false; // Support close button on small screen\n  @Output() unreadMessageChange = new EventEmitter<number>();\n  @ViewChild(MessageChatComponent) messageChatComponent:MessageChatComponent;\n\n  contact: MessageContact;\n  chatOpen: boolean = false;\n  readyToChat: boolean = false;\n  stateMessage: string;\n  roomName: string;\n  private readonly _socketSub: any;\n  private readonly _messageSub: any;\n\n  constructor(private messageService: ChatMessageService) {\n    this._socketSub = this.messageService.socketService.onStateChange.subscribe(() => this._stateChange());\n    this._messageSub = this.messageService.unreadMessageChange.subscribe((count) => this.unreadMessageChange.emit(count));\n    this._stateChange();\n  }\n\n  private _stateChange() {\n    this.readyToChat = this.messageService.socketService.connected;\n    if (this.messageService.socketService.connected) {\n      this.stateMessage = '';\n    } else if (this.messageService.socketService.closed) {\n      this.stateMessage = 'Káº¿t ná»i khÃ´ng thÃ nh cÃ´ng';\n    } else {\n      this.stateMessage = 'Äang káº¿t ná»i...';\n    }\n  }\n\n  ngOnDestroy() {\n    this._socketSub.unsubscribe();\n    this._messageSub.unsubscribe();\n  }\n\n  openVideoCall(contact: MessageContact) {\n\n  }\n\n  openAudioCall(contact: MessageContact) {\n\n  }\n\n  openChatWith(contact: MessageContact, call?: boolean) {\n    this.roomName= null;\n    if (this.contact !== contact) {\n      this.contact = contact;\n      contact.unread = 0; // mark read\n    }\n    // Delay for chat\n    setTimeout(() => {\n      this.chatOpen = true;\n      if(call){\n        this.messageChatComponent.messageJoinCall['joined']= false;\n        this.messageChatComponent.joinRoom(true,contact.usercode);\n      }\n    }, 100);\n  }\n\n  closeChat() {\n    this.chatOpen = false;\n  }\n\n  openRoom(roomName: string) {\n    this.contact = null;\n    this.roomName = roomName;\n  }\n  callToContactSelected(contact){\n    this.openChatWith(contact, true);\n  }\n}\n","import {Injectable} from '@angular/core';\n\ndeclare let iNet: any;\n\nconst FILES_FORMAT = [\n    'unknown', 'text', 'archive', 'audio', 'video',\n    'png', 'jpg', 'gif', 'tiff', 'svg', 'ai', 'psd', 'dwg',\n    'avi', 'fla', 'mp2', 'mp3', 'mp4', 'aac', 'flac', 'wma', 'wav', 'mxf',\n    'iso', 'mdf', 'nrg',\n    'zip', '7z', 'arj', 'rar',\n    'pdf', 'doc', 'rtf', 'txt', 'xls', 'ppt',\n    'css', 'csv', 'html', 'json', 'js', 'xml',\n    'dbf', 'exe'\n];\n\nconst FILES_EDIT_FORMAT = [\n    'doc', 'docx', 'odt', 'ods', 'xls', 'xlsx',\n    'ppt', 'pps', 'pptm', 'pptx','pot', 'potx',\n    'dot', 'dotx', 'docm','dotx', 'csv' , 'sxw']\n;\n\nconst FILES_VIEW_FORMAT = ['pdf', 'png', 'jpg' ,'jpeg' , 'gif'];\n\nconst UNKNOWN = 'unknown';\n\n@Injectable()\nexport class FileFormatService {\n\n    constructor() {}\n\n    getImagePath(): string {\n        let path =  iNet.commonImageFolder;\n        const lastIndex = path.lastIndexOf('/');\n        if (lastIndex === path.length - 1) {\n            return path.substring(0, lastIndex);\n        }\n        return path;\n    }\n\n    getFileFormatPath(): string {\n        return `${this.getImagePath()}/format`;\n    }\n\n    getUrlByExt(ext: string) {\n        const path = this.getFileFormatPath();\n        if (FILES_FORMAT.indexOf(ext) > -1) {\n            return `${path}/${ext.toLowerCase()}.svg`\n        }\n        return `${path}/${UNKNOWN}.svg`\n    }\n\n    getUrlByName(name: string) {\n        return this.getUrlByExt(this.getExtByName(name));\n    }\n\n    getExtByName(name: string) {\n        return name.split('.').pop().toLowerCase() || UNKNOWN;\n    }\n\n    getEditFormats(): string[] {\n        return FILES_EDIT_FORMAT;\n    }\n\n    getViewFormats(): string[] {\n        return FILES_VIEW_FORMAT;\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {FileFormatService} from \"./file-format.service\";\n\n@Pipe({\n    name: 'fileExt'\n})\nexport class FileExtPipe implements PipeTransform {\n    constructor(private formatService: FileFormatService) {\n    }\n\n    transform(name: string): string {\n        return this.formatService.getExtByName(name);\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {FileFormatService} from \"./file-format.service\";\n\n@Pipe({\n    name: 'fileIcon'\n})\nexport class FileIconPipe implements PipeTransform {\n\n    constructor(private formatService: FileFormatService) {\n\n    }\n\n    transform(name: string): string {\n        return this.formatService.getUrlByName(name);\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FileExtPipe} from './file-ext.pipe';\nimport {FileIconPipe} from './file-icon.pipe';\nimport {FileFormatService} from './file-format.service';\nimport {FileListComponent} from \"./list/file-list.component\";\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        FileIconPipe,\n        FileExtPipe,\n        FileListComponent\n    ],\n    exports: [\n        FileIconPipe,\n        FileExtPipe,\n        FileListComponent\n    ],\n    providers: [FileFormatService]\n})\nexport class FileListModule {\n}\n","import {\n    Component, Input, OnDestroy, OnInit,\n} from '@angular/core';\nimport {VideoConferenceService} from \"../../video-conference.service\";\n\n@Component({\n    selector: 'room-chat',\n    templateUrl: './room-chat.component.html',\n    styleUrls: ['./room-chat.component.css']\n})\nexport class RoomChatComponent implements  OnInit, OnDestroy{\n    @Input() roomName: string;\n    videoPanelVisible: boolean = true;\n\n    constructor(\n        private videoService: VideoConferenceService,\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.joinRoom();\n    }\n\n    ngOnDestroy(): void {\n        this.disposeRoom();\n    }\n\n    joinRoom() {\n        this.videoPanelVisible = false;\n        if(!this.videoService.isExistMeet()) {\n            return;\n        }\n        this.disposeRoom();\n        this.videoService.join(document.querySelector('#meetRoom'),this.roomName, false, 600);\n        this.videoService.getApi().addEventListener('readyToClose',  ()=> {\n            this.disposeRoom();\n        });\n    }\n\n    disposeRoom() {\n        this.videoPanelVisible = true;\n        this.videoService.dispose();\n    }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {OpenGraphService} from \"../open-graph.service\";\nimport {OpenGraphData, OpenGraphImageInfo} from \"../model/OpenGraphData\";\n\n@Component({\n  selector: 'app-link-preview',\n  templateUrl: './link-preview.component.html',\n  styleUrls: ['./link-preview.component.css']\n})\nexport class LinkPreviewComponent implements OnInit {\n  @Input() link: string;\n  @Input() openGraphData: OpenGraphData;\n  @Input() removable: boolean = true;\n  @Output() onLoad = new EventEmitter();\n  @Output() onDelete = new EventEmitter();\n\n  _hidden: boolean = false;\n\n  constructor(\n    private openGraphService: OpenGraphService\n  ) { }\n\n  ngOnInit() {\n    if (this.openGraphService.isLink(this.link)) {\n      this.loadPreview();\n    } else if(this.openGraphData) {\n      this.loadImageInfo();\n    } else{\n      this.setHidden(true);\n    }\n  }\n\n  isPreview(): boolean {\n    return !this.isHidden() && (!!this.link || !!this.openGraphData);\n  }\n\n  setData(data: OpenGraphData) {\n    if (!data || !data.title) {\n      return;\n    }\n    this.openGraphData = data;\n    this.loadImageInfo();\n    this.setHidden(false);\n  }\n\n  getData() {\n    return this.openGraphData;\n  }\n\n  setLink(link: string) {\n    if (this.link === link) {\n      return;\n    }\n    this.link = link;\n    this.loadPreview();\n  }\n\n  removePreView() {\n    this.onDelete.emit(this);\n    this.clearData();\n  }\n\n  getDomain(url: string): string {\n    if (!url) {\n      return '';\n    }\n    let domain = url.split('/')[2] || '';\n    return domain.replace('www.', '');\n  }\n\n  clearData() {\n    this.link = null;\n    this.openGraphData = null;\n    this.setHidden(true);\n  }\n\n  private loadPreview() {\n    this.setHidden(false);\n    if (this.openGraphService.isLink(this.link)) {\n      this.openGraphService.loadPreviewLink(this.link, (data: OpenGraphData) => {\n        if (data) {\n          this.setData(data);\n        } else {\n          this.setHidden(true);\n        }\n      });\n    } else {\n      this.setHidden(true);\n    }\n  }\n\n  private loadImageInfo() {\n    if (this.openGraphData && this.openGraphData.image) {\n      this.openGraphService.loadImageInfo(this.openGraphData.image, (imageInfo: OpenGraphImageInfo) => {\n        this.openGraphData.imageInfo = imageInfo;\n      });\n    }\n  }\n\n  private setHidden(hidden: boolean) {\n    this._hidden = hidden;\n  }\n  \n  private isHidden() {\n    return this._hidden;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {OpenGraphService} from \"./open-graph.service\";\nimport { LinkPreviewComponent } from \"./link-preview/link-preview.component\";\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    LinkPreviewComponent\n  ],\n  declarations: [\n    LinkPreviewComponent\n  ],\n  providers: [\n    OpenGraphService\n  ]\n})\nexport class OpenGraphModule { }\n","import {NgModule, Injectable} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AccentService, CoreModule, WebSocketClientService} from \"inet-core\";\nimport {ChatMessageService} from \"./message.service\";\nimport {ContactListComponent} from \"./component/contact-list/contact-list.component\";\nimport {MessageChatComponent} from \"./component/message-chat/message-chat.component\";\nimport { SearchInputComponent } from './component/search-input/search-input.component';\nimport { MessagePanelComponent } from './component/message-panel/message-panel.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {AutosizeModule} from \"ngx-autosize\";\nimport {FileListModule} from \"./filelist/file-list.module\";\nimport {RoomChatComponent} from \"./component/room-chat/room-chat.component\";\nimport {VideoConferenceService} from \"./video-conference.service\";\nimport { OpenGraphModule } from './open-graph/open-graph.module';\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        CoreModule,\n        AutosizeModule,\n        FileListModule,\n        OpenGraphModule\n    ],\n    exports: [\n        MessageChatComponent,\n        ContactListComponent,\n        SearchInputComponent,\n        MessagePanelComponent\n    ],\n    declarations: [\n        MessageChatComponent,\n        ContactListComponent,\n        SearchInputComponent,\n        MessagePanelComponent,\n        RoomChatComponent\n    ],\n    providers: [\n        AccentService,\n        ChatMessageService,\n        VideoConferenceService,\n        WebSocketClientService\n    ]\n})\nexport class ChatMessageModule {\n}\n"]}