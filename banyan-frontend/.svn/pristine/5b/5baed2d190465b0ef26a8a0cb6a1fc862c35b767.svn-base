import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { SlickgridConfig } from '../slickgrid-config';
import { TranslateService } from '@ngx-translate/core';
import { CollectionService } from '../services/collection.service';
let FilterFactory = class FilterFactory {
    constructor(config, translate, collectionService) {
        this.config = config;
        this.translate = translate;
        this.collectionService = collectionService;
        this._options = this.config.options;
    }
    // Uses the User model to create a new User
    createFilter(columnFilter) {
        let filter;
        if (columnFilter && columnFilter.model) {
            filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;
        }
        // fallback to the default filter
        if (!filter && this._options.defaultFilter) {
            filter = new this._options.defaultFilter(this.translate, this.collectionService);
        }
        return filter;
    }
};
FilterFactory = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [SlickgridConfig, TranslateService, CollectionService])
], FilterFactory);
export { FilterFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyRmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZmlsdGVycy9maWx0ZXJGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUduRSxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBTXhCLFlBQW9CLE1BQXVCLEVBQVUsU0FBMkIsRUFBVSxpQkFBb0M7UUFBMUcsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDNUgsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQsMkNBQTJDO0lBQzNDLFlBQVksQ0FBQyxZQUFzQztRQUNqRCxJQUFJLE1BQTBCLENBQUM7UUFFL0IsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtZQUN0QyxNQUFNLEdBQUcsT0FBTyxZQUFZLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDekk7UUFFRCxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRTtZQUMxQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGLENBQUE7QUF6QlksYUFBYTtJQUR6QixVQUFVLEVBQUU7NkNBT2lCLGVBQWUsRUFBcUIsZ0JBQWdCLEVBQTZCLGlCQUFpQjtHQU5uSCxhQUFhLENBeUJ6QjtTQXpCWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi9tb2RlbHMvZmlsdGVyLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IENvbHVtbkZpbHRlciB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IFNsaWNrZ3JpZENvbmZpZyB9IGZyb20gJy4uL3NsaWNrZ3JpZC1jb25maWcnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IENvbGxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29sbGVjdGlvbi5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZpbHRlckZhY3Rvcnkge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcHRpb25zIGZyb20gdGhlIFNsaWNrZ3JpZENvbmZpZ1xyXG4gICAqL1xyXG4gIHByaXZhdGUgX29wdGlvbnM6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IFNsaWNrZ3JpZENvbmZpZywgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsIHByaXZhdGUgY29sbGVjdGlvblNlcnZpY2U6IENvbGxlY3Rpb25TZXJ2aWNlKSB7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5jb25maWcub3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8vIFVzZXMgdGhlIFVzZXIgbW9kZWwgdG8gY3JlYXRlIGEgbmV3IFVzZXJcclxuICBjcmVhdGVGaWx0ZXIoY29sdW1uRmlsdGVyOiBDb2x1bW5GaWx0ZXIgfCB1bmRlZmluZWQpOiBGaWx0ZXIgfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IGZpbHRlcjogRmlsdGVyIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGlmIChjb2x1bW5GaWx0ZXIgJiYgY29sdW1uRmlsdGVyLm1vZGVsKSB7XHJcbiAgICAgIGZpbHRlciA9IHR5cGVvZiBjb2x1bW5GaWx0ZXIubW9kZWwgPT09ICdmdW5jdGlvbicgPyBuZXcgY29sdW1uRmlsdGVyLm1vZGVsKHRoaXMudHJhbnNsYXRlLCB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlKSA6IGNvbHVtbkZpbHRlci5tb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBmaWx0ZXJcclxuICAgIGlmICghZmlsdGVyICYmIHRoaXMuX29wdGlvbnMuZGVmYXVsdEZpbHRlcikge1xyXG4gICAgICBmaWx0ZXIgPSBuZXcgdGhpcy5fb3B0aW9ucy5kZWZhdWx0RmlsdGVyKHRoaXMudHJhbnNsYXRlLCB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmlsdGVyO1xyXG4gIH1cclxufVxyXG4iXX0=