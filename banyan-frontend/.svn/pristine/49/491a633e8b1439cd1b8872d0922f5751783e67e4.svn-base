import { AutoCompleteFilter } from './autoCompleteFilter';
import { CompoundDateFilter } from './compoundDateFilter';
import { CompoundInputFilter } from './compoundInputFilter';
import { CompoundInputNumberFilter } from './compoundInputNumberFilter';
import { CompoundInputPasswordFilter } from './compoundInputPasswordFilter';
import { CompoundSliderFilter } from './compoundSliderFilter';
import { InputFilter } from './inputFilter';
import { InputMaskFilter } from './inputMaskFilter';
import { InputNumberFilter } from './inputNumberFilter';
import { InputPasswordFilter } from './inputPasswordFilter';
import { MultipleSelectFilter } from './multipleSelectFilter';
import { NativeSelectFilter } from './nativeSelectFilter';
import { SingleSelectFilter } from './singleSelectFilter';
import { SliderFilter } from './sliderFilter';
export var Filters = {
    /** AutoComplete Filter (using jQuery UI autocomplete feature) */
    autoComplete: AutoCompleteFilter,
    /** Compound Date Filter (compound of Operator + Date picker) */
    compoundDate: CompoundDateFilter,
    /** Alias to compoundInputText to Compound Input Filter (compound of Operator + Input Text) */
    compoundInput: CompoundInputFilter,
    /** Compound Input Number Filter (compound of Operator + Input of type Number) */
    compoundInputNumber: CompoundInputNumberFilter,
    /** Compound Input Password Filter (compound of Operator + Input of type Password, also note that only the text shown in the UI will be masked, filter query is still plain text) */
    compoundInputPassword: CompoundInputPasswordFilter,
    /** Compound Input Text Filter (compound of Operator + Input Text) */
    compoundInputText: CompoundInputFilter,
    /** Compound Slider Filter (compound of Operator + Slider) */
    compoundSlider: CompoundSliderFilter,
    /** Alias to inputText, input type text filter */
    input: InputFilter,
    /**
     * Input Filter of type text that will be formatted with a mask output
     * e.g.: column: { filter: { model: Filters.inputMask }, params: { mask: '(000) 000-0000' }}
     */
    inputMask: InputMaskFilter,
    /** Input Filter of type Number */
    inputNumber: InputNumberFilter,
    /** Input Filter of type Password (note that only the text shown in the UI will be masked, filter query is still plain text) */
    inputPassword: InputPasswordFilter,
    /** Default Filter, input type text filter */
    inputText: InputFilter,
    /** Multiple Select filter, which uses 3rd party lib "multiple-select.js" */
    multipleSelect: MultipleSelectFilter,
    /** Select filter, which uses native DOM element select */
    select: NativeSelectFilter,
    /** Single Select filter, which uses 3rd party lib "multiple-select.js" */
    singleSelect: SingleSelectFilter,
    /** Slider Filter */
    slider: SliderFilter,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL2ZpbHRlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRztJQUNyQixpRUFBaUU7SUFDakUsWUFBWSxFQUFFLGtCQUFrQjtJQUVoQyxnRUFBZ0U7SUFDaEUsWUFBWSxFQUFFLGtCQUFrQjtJQUVoQyw4RkFBOEY7SUFDOUYsYUFBYSxFQUFFLG1CQUFtQjtJQUVsQyxpRkFBaUY7SUFDakYsbUJBQW1CLEVBQUUseUJBQXlCO0lBRTlDLG9MQUFvTDtJQUNwTCxxQkFBcUIsRUFBRSwyQkFBMkI7SUFFbEQscUVBQXFFO0lBQ3JFLGlCQUFpQixFQUFFLG1CQUFtQjtJQUV0Qyw2REFBNkQ7SUFDN0QsY0FBYyxFQUFFLG9CQUFvQjtJQUVwQyxpREFBaUQ7SUFDakQsS0FBSyxFQUFFLFdBQVc7SUFFbEI7OztPQUdHO0lBQ0gsU0FBUyxFQUFFLGVBQWU7SUFFMUIsa0NBQWtDO0lBQ2xDLFdBQVcsRUFBRSxpQkFBaUI7SUFFOUIsK0hBQStIO0lBQy9ILGFBQWEsRUFBRSxtQkFBbUI7SUFFbEMsNkNBQTZDO0lBQzdDLFNBQVMsRUFBRSxXQUFXO0lBRXRCLDRFQUE0RTtJQUM1RSxjQUFjLEVBQUUsb0JBQW9CO0lBRXBDLDBEQUEwRDtJQUMxRCxNQUFNLEVBQUUsa0JBQWtCO0lBRTFCLDBFQUEwRTtJQUMxRSxZQUFZLEVBQUUsa0JBQWtCO0lBRWhDLG9CQUFvQjtJQUNwQixNQUFNLEVBQUUsWUFBWTtDQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBGaWx0ZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IEF1dG9Db21wbGV0ZUZpbHRlciB9IGZyb20gJy4vYXV0b0NvbXBsZXRlRmlsdGVyJztcclxuaW1wb3J0IHsgQ29tcG91bmREYXRlRmlsdGVyIH0gZnJvbSAnLi9jb21wb3VuZERhdGVGaWx0ZXInO1xyXG5pbXBvcnQgeyBDb21wb3VuZElucHV0RmlsdGVyIH0gZnJvbSAnLi9jb21wb3VuZElucHV0RmlsdGVyJztcclxuaW1wb3J0IHsgQ29tcG91bmRJbnB1dE51bWJlckZpbHRlciB9IGZyb20gJy4vY29tcG91bmRJbnB1dE51bWJlckZpbHRlcic7XHJcbmltcG9ydCB7IENvbXBvdW5kSW5wdXRQYXNzd29yZEZpbHRlciB9IGZyb20gJy4vY29tcG91bmRJbnB1dFBhc3N3b3JkRmlsdGVyJztcclxuaW1wb3J0IHsgQ29tcG91bmRTbGlkZXJGaWx0ZXIgfSBmcm9tICcuL2NvbXBvdW5kU2xpZGVyRmlsdGVyJztcclxuaW1wb3J0IHsgSW5wdXRGaWx0ZXIgfSBmcm9tICcuL2lucHV0RmlsdGVyJztcclxuaW1wb3J0IHsgSW5wdXRNYXNrRmlsdGVyIH0gZnJvbSAnLi9pbnB1dE1hc2tGaWx0ZXInO1xyXG5pbXBvcnQgeyBJbnB1dE51bWJlckZpbHRlciB9IGZyb20gJy4vaW5wdXROdW1iZXJGaWx0ZXInO1xyXG5pbXBvcnQgeyBJbnB1dFBhc3N3b3JkRmlsdGVyIH0gZnJvbSAnLi9pbnB1dFBhc3N3b3JkRmlsdGVyJztcclxuaW1wb3J0IHsgTXVsdGlwbGVTZWxlY3RGaWx0ZXIgfSBmcm9tICcuL211bHRpcGxlU2VsZWN0RmlsdGVyJztcclxuaW1wb3J0IHsgTmF0aXZlU2VsZWN0RmlsdGVyIH0gZnJvbSAnLi9uYXRpdmVTZWxlY3RGaWx0ZXInO1xyXG5pbXBvcnQgeyBTaW5nbGVTZWxlY3RGaWx0ZXIgfSBmcm9tICcuL3NpbmdsZVNlbGVjdEZpbHRlcic7XHJcbmltcG9ydCB7IFNsaWRlckZpbHRlciB9IGZyb20gJy4vc2xpZGVyRmlsdGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBGaWx0ZXJzID0ge1xyXG4gIC8qKiBBdXRvQ29tcGxldGUgRmlsdGVyICh1c2luZyBqUXVlcnkgVUkgYXV0b2NvbXBsZXRlIGZlYXR1cmUpICovXHJcbiAgYXV0b0NvbXBsZXRlOiBBdXRvQ29tcGxldGVGaWx0ZXIsXHJcblxyXG4gIC8qKiBDb21wb3VuZCBEYXRlIEZpbHRlciAoY29tcG91bmQgb2YgT3BlcmF0b3IgKyBEYXRlIHBpY2tlcikgKi9cclxuICBjb21wb3VuZERhdGU6IENvbXBvdW5kRGF0ZUZpbHRlcixcclxuXHJcbiAgLyoqIEFsaWFzIHRvIGNvbXBvdW5kSW5wdXRUZXh0IHRvIENvbXBvdW5kIElucHV0IEZpbHRlciAoY29tcG91bmQgb2YgT3BlcmF0b3IgKyBJbnB1dCBUZXh0KSAqL1xyXG4gIGNvbXBvdW5kSW5wdXQ6IENvbXBvdW5kSW5wdXRGaWx0ZXIsXHJcblxyXG4gIC8qKiBDb21wb3VuZCBJbnB1dCBOdW1iZXIgRmlsdGVyIChjb21wb3VuZCBvZiBPcGVyYXRvciArIElucHV0IG9mIHR5cGUgTnVtYmVyKSAqL1xyXG4gIGNvbXBvdW5kSW5wdXROdW1iZXI6IENvbXBvdW5kSW5wdXROdW1iZXJGaWx0ZXIsXHJcblxyXG4gIC8qKiBDb21wb3VuZCBJbnB1dCBQYXNzd29yZCBGaWx0ZXIgKGNvbXBvdW5kIG9mIE9wZXJhdG9yICsgSW5wdXQgb2YgdHlwZSBQYXNzd29yZCwgYWxzbyBub3RlIHRoYXQgb25seSB0aGUgdGV4dCBzaG93biBpbiB0aGUgVUkgd2lsbCBiZSBtYXNrZWQsIGZpbHRlciBxdWVyeSBpcyBzdGlsbCBwbGFpbiB0ZXh0KSAqL1xyXG4gIGNvbXBvdW5kSW5wdXRQYXNzd29yZDogQ29tcG91bmRJbnB1dFBhc3N3b3JkRmlsdGVyLFxyXG5cclxuICAvKiogQ29tcG91bmQgSW5wdXQgVGV4dCBGaWx0ZXIgKGNvbXBvdW5kIG9mIE9wZXJhdG9yICsgSW5wdXQgVGV4dCkgKi9cclxuICBjb21wb3VuZElucHV0VGV4dDogQ29tcG91bmRJbnB1dEZpbHRlcixcclxuXHJcbiAgLyoqIENvbXBvdW5kIFNsaWRlciBGaWx0ZXIgKGNvbXBvdW5kIG9mIE9wZXJhdG9yICsgU2xpZGVyKSAqL1xyXG4gIGNvbXBvdW5kU2xpZGVyOiBDb21wb3VuZFNsaWRlckZpbHRlcixcclxuXHJcbiAgLyoqIEFsaWFzIHRvIGlucHV0VGV4dCwgaW5wdXQgdHlwZSB0ZXh0IGZpbHRlciAqL1xyXG4gIGlucHV0OiBJbnB1dEZpbHRlcixcclxuXHJcbiAgLyoqXHJcbiAgICogSW5wdXQgRmlsdGVyIG9mIHR5cGUgdGV4dCB0aGF0IHdpbGwgYmUgZm9ybWF0dGVkIHdpdGggYSBtYXNrIG91dHB1dFxyXG4gICAqIGUuZy46IGNvbHVtbjogeyBmaWx0ZXI6IHsgbW9kZWw6IEZpbHRlcnMuaW5wdXRNYXNrIH0sIHBhcmFtczogeyBtYXNrOiAnKDAwMCkgMDAwLTAwMDAnIH19XHJcbiAgICovXHJcbiAgaW5wdXRNYXNrOiBJbnB1dE1hc2tGaWx0ZXIsXHJcblxyXG4gIC8qKiBJbnB1dCBGaWx0ZXIgb2YgdHlwZSBOdW1iZXIgKi9cclxuICBpbnB1dE51bWJlcjogSW5wdXROdW1iZXJGaWx0ZXIsXHJcblxyXG4gIC8qKiBJbnB1dCBGaWx0ZXIgb2YgdHlwZSBQYXNzd29yZCAobm90ZSB0aGF0IG9ubHkgdGhlIHRleHQgc2hvd24gaW4gdGhlIFVJIHdpbGwgYmUgbWFza2VkLCBmaWx0ZXIgcXVlcnkgaXMgc3RpbGwgcGxhaW4gdGV4dCkgKi9cclxuICBpbnB1dFBhc3N3b3JkOiBJbnB1dFBhc3N3b3JkRmlsdGVyLFxyXG5cclxuICAvKiogRGVmYXVsdCBGaWx0ZXIsIGlucHV0IHR5cGUgdGV4dCBmaWx0ZXIgKi9cclxuICBpbnB1dFRleHQ6IElucHV0RmlsdGVyLFxyXG5cclxuICAvKiogTXVsdGlwbGUgU2VsZWN0IGZpbHRlciwgd2hpY2ggdXNlcyAzcmQgcGFydHkgbGliIFwibXVsdGlwbGUtc2VsZWN0LmpzXCIgKi9cclxuICBtdWx0aXBsZVNlbGVjdDogTXVsdGlwbGVTZWxlY3RGaWx0ZXIsXHJcblxyXG4gIC8qKiBTZWxlY3QgZmlsdGVyLCB3aGljaCB1c2VzIG5hdGl2ZSBET00gZWxlbWVudCBzZWxlY3QgKi9cclxuICBzZWxlY3Q6IE5hdGl2ZVNlbGVjdEZpbHRlcixcclxuXHJcbiAgLyoqIFNpbmdsZSBTZWxlY3QgZmlsdGVyLCB3aGljaCB1c2VzIDNyZCBwYXJ0eSBsaWIgXCJtdWx0aXBsZS1zZWxlY3QuanNcIiAqL1xyXG4gIHNpbmdsZVNlbGVjdDogU2luZ2xlU2VsZWN0RmlsdGVyLFxyXG5cclxuICAvKiogU2xpZGVyIEZpbHRlciAqL1xyXG4gIHNsaWRlcjogU2xpZGVyRmlsdGVyLFxyXG59O1xyXG4iXX0=