import { decimalFormatted } from '../services/utilities';
import { getValueFromParamsOrGridOptions } from '../formatters/formatterUtilities';
export var avgTotalsPercentageFormatter = function (totals, columnDef, grid) {
    var field = columnDef.field || '';
    var val = totals.avg && totals.avg[field];
    var params = columnDef && columnDef.params;
    var prefix = params && params.groupFormatterPrefix || '';
    var suffix = params && params.groupFormatterSuffix || '';
    var minDecimal = getValueFromParamsOrGridOptions('minDecimal', columnDef, grid);
    var maxDecimal = getValueFromParamsOrGridOptions('maxDecimal', columnDef, grid);
    var displayNegativeNumberWithParentheses = getValueFromParamsOrGridOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    return prefix + "(" + Math.round(val) + "%)" + suffix;
                }
                return prefix + "(" + decimalFormatted(val, minDecimal, maxDecimal) + "%)" + suffix;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            return "" + prefix + Math.round(val) + "%" + suffix;
        }
        return "" + prefix + decimalFormatted(val, minDecimal, maxDecimal) + "%" + suffix;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzUGVyY2VudGFnZUZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZ3JvdXBpbmctZm9ybWF0dGVycy9hdmdUb3RhbHNQZXJjZW50YWdlRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRW5GLE1BQU0sQ0FBQyxJQUFNLDRCQUE0QixHQUF5QixVQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLElBQVU7SUFDM0csSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDcEMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLElBQU0sTUFBTSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzdDLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBQzNELElBQU0sVUFBVSxHQUFHLCtCQUErQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEYsSUFBTSxVQUFVLEdBQUcsK0JBQStCLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRixJQUFNLG9DQUFvQyxHQUFHLCtCQUErQixDQUFDLHNDQUFzQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFN0ksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDL0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0wsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUMxQyxPQUFVLE1BQU0sU0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFLLE1BQVEsQ0FBQztpQkFDbEQ7Z0JBQ0QsT0FBVSxNQUFNLFNBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBSyxNQUFRLENBQUM7YUFDaEY7U0FDRjtRQUVELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMxQyxPQUFPLEtBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQUksTUFBUSxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxLQUFHLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxTQUFJLE1BQVEsQ0FBQztLQUM5RTtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBHcm91cFRvdGFsc0Zvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgZGVjaW1hbEZvcm1hdHRlZCB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMgfSBmcm9tICcuLi9mb3JtYXR0ZXJzL2Zvcm1hdHRlclV0aWxpdGllcyc7XHJcblxyXG5leHBvcnQgY29uc3QgYXZnVG90YWxzUGVyY2VudGFnZUZvcm1hdHRlcjogR3JvdXBUb3RhbHNGb3JtYXR0ZXIgPSAodG90YWxzOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBncmlkPzogYW55KSA9PiB7XHJcbiAgY29uc3QgZmllbGQgPSBjb2x1bW5EZWYuZmllbGQgfHwgJyc7XHJcbiAgbGV0IHZhbCA9IHRvdGFscy5hdmcgJiYgdG90YWxzLmF2Z1tmaWVsZF07XHJcbiAgY29uc3QgcGFyYW1zID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi5wYXJhbXM7XHJcbiAgbGV0IHByZWZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJQcmVmaXggfHwgJyc7XHJcbiAgY29uc3Qgc3VmZml4ID0gcGFyYW1zICYmIHBhcmFtcy5ncm91cEZvcm1hdHRlclN1ZmZpeCB8fCAnJztcclxuICBjb25zdCBtaW5EZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JHcmlkT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCk7XHJcbiAgY29uc3QgbWF4RGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ21heERlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ2Rpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcycsIGNvbHVtbkRlZiwgZ3JpZCwgZmFsc2UpO1xyXG5cclxuICBpZiAodmFsICE9IG51bGwgJiYgIWlzTmFOKCt2YWwpKSB7XHJcbiAgICBpZiAodmFsIDwgMCkge1xyXG4gICAgICB2YWwgPSBNYXRoLmFicyh2YWwpO1xyXG4gICAgICBpZiAoIWRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcykge1xyXG4gICAgICAgIHByZWZpeCArPSAnLSc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKG1pbkRlY2ltYWwpICYmIGlzTmFOKG1heERlY2ltYWwpKSB7XHJcbiAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSgke01hdGgucm91bmQodmFsKX0lKSR7c3VmZml4fWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9KCR7ZGVjaW1hbEZvcm1hdHRlZCh2YWwsIG1pbkRlY2ltYWwsIG1heERlY2ltYWwpfSUpJHtzdWZmaXh9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc05hTihtaW5EZWNpbWFsKSAmJiBpc05hTihtYXhEZWNpbWFsKSkge1xyXG4gICAgICByZXR1cm4gYCR7cHJlZml4fSR7TWF0aC5yb3VuZCh2YWwpfSUke3N1ZmZpeH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsKX0lJHtzdWZmaXh9YDtcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59O1xyXG4iXX0=