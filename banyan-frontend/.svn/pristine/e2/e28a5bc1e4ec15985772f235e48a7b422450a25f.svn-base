import { decimalFormatted } from '../services/utilities';
import { getValueFromParamsOrGridOptions } from '../formatters/formatterUtilities';
export var avgTotalsFormatter = function (totals, columnDef, grid) {
    var field = columnDef.field || '';
    var val = totals.avg && totals.avg[field];
    var params = columnDef && columnDef.params;
    var prefix = params && params.groupFormatterPrefix || '';
    var suffix = params && params.groupFormatterSuffix || '';
    var minDecimal = getValueFromParamsOrGridOptions('minDecimal', columnDef, grid);
    var maxDecimal = getValueFromParamsOrGridOptions('maxDecimal', columnDef, grid);
    var displayNegativeNumberWithParentheses = getValueFromParamsOrGridOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    return prefix + "(" + Math.round(val) + ")" + suffix;
                }
                return prefix + "(" + decimalFormatted(val, minDecimal, maxDecimal) + ")" + suffix;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            return "" + prefix + Math.round(val) + suffix;
        }
        return "" + prefix + decimalFormatted(val, minDecimal, maxDecimal) + suffix;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9ncm91cGluZy1mb3JtYXR0ZXJzL2F2Z1RvdGFsc0Zvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVuRixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBeUIsVUFBQyxNQUFXLEVBQUUsU0FBaUIsRUFBRSxJQUFVO0lBQ2pHLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxJQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUN6RCxJQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxJQUFNLFVBQVUsR0FBRywrQkFBK0IsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xGLElBQU0sVUFBVSxHQUFHLCtCQUErQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEYsSUFBTSxvQ0FBb0MsR0FBRywrQkFBK0IsQ0FBQyxzQ0FBc0MsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtZQUNYLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxvQ0FBb0MsRUFBRTtnQkFDekMsTUFBTSxJQUFJLEdBQUcsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDMUMsT0FBVSxNQUFNLFNBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBSSxNQUFRLENBQUM7aUJBQ2pEO2dCQUNELE9BQVUsTUFBTSxTQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLFNBQUksTUFBUSxDQUFDO2FBQy9FO1NBQ0Y7UUFFRCxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDMUMsT0FBTyxLQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQVEsQ0FBQztTQUMvQztRQUNELE9BQU8sS0FBRyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFRLENBQUM7S0FDN0U7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgR3JvdXBUb3RhbHNGb3JtYXR0ZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IGRlY2ltYWxGb3JtYXR0ZWQgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9mb3JtYXR0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2Z1RvdGFsc0Zvcm1hdHRlcjogR3JvdXBUb3RhbHNGb3JtYXR0ZXIgPSAodG90YWxzOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBncmlkPzogYW55KSA9PiB7XHJcbiAgY29uc3QgZmllbGQgPSBjb2x1bW5EZWYuZmllbGQgfHwgJyc7XHJcbiAgbGV0IHZhbCA9IHRvdGFscy5hdmcgJiYgdG90YWxzLmF2Z1tmaWVsZF07XHJcbiAgY29uc3QgcGFyYW1zID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi5wYXJhbXM7XHJcbiAgbGV0IHByZWZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJQcmVmaXggfHwgJyc7XHJcbiAgY29uc3Qgc3VmZml4ID0gcGFyYW1zICYmIHBhcmFtcy5ncm91cEZvcm1hdHRlclN1ZmZpeCB8fCAnJztcclxuICBjb25zdCBtaW5EZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JHcmlkT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCk7XHJcbiAgY29uc3QgbWF4RGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ21heERlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ2Rpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcycsIGNvbHVtbkRlZiwgZ3JpZCwgZmFsc2UpO1xyXG5cclxuICBpZiAodmFsICE9IG51bGwgJiYgIWlzTmFOKCt2YWwpKSB7XHJcbiAgICBpZiAodmFsIDwgMCkge1xyXG4gICAgICB2YWwgPSBNYXRoLmFicyh2YWwpO1xyXG4gICAgICBpZiAoIWRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcykge1xyXG4gICAgICAgIHByZWZpeCArPSAnLSc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKG1pbkRlY2ltYWwpICYmIGlzTmFOKG1heERlY2ltYWwpKSB7XHJcbiAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSgke01hdGgucm91bmQodmFsKX0pJHtzdWZmaXh9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0oJHtkZWNpbWFsRm9ybWF0dGVkKHZhbCwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCl9KSR7c3VmZml4fWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNOYU4obWluRGVjaW1hbCkgJiYgaXNOYU4obWF4RGVjaW1hbCkpIHtcclxuICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke01hdGgucm91bmQodmFsKX0ke3N1ZmZpeH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsKX0ke3N1ZmZpeH1gO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn07XHJcbiJdfQ==