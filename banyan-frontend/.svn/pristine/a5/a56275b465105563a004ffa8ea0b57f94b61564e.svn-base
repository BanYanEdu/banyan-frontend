/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EXT_ACTION, EXT_HASH_ALG } from "./Constants";
import * as JSEncryptModule from "jsencrypt";
/** @type {?} */
const JSEncrypt = JSEncryptModule.JSEncrypt;
export class TokenSimulator {
    /**
     * @param {?} action
     * @param {?=} data
     * @return {?}
     */
    static postToExtension(action, data) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            switch (action) {
                case EXT_ACTION.GET_INFO:
                    resolve({ data: {
                            version: '0.0.1',
                            nativeVersion: 1,
                            nativeLatestVersion: 1,
                        } });
                    break;
                case EXT_ACTION.SIGN_HASH:
                    this._sign(data, resolve);
                    break;
                case EXT_ACTION.GET_CERTS:
                    resolve({ data: this._certs });
                    break;
            }
        }));
        return promise;
    }
    /**
     * @param {?} data
     * @param {?} resolve
     * @return {?}
     */
    static _sign(data, resolve) {
        try {
            /** @type {?} */
            const cert = this._getCert(data.serial);
            /** @type {?} */
            const response = {
                serial: cert.serial,
                cert: cert.cert,
                hashAlg: data.hashAlg || EXT_HASH_ALG.SHA1
            };
            /** @type {?} */
            const jsEncrypt = new JSEncrypt(null);
            jsEncrypt.setPrivateKey(cert.pk);
            if (data.hashs) {
                response.signatures = [];
                data.hashs.forEach((/**
                 * @param {?} hash
                 * @return {?}
                 */
                (hash) => {
                    response.signatures.push(jsEncrypt.sign(hash, (/**
                     * @param {?} str
                     * @return {?}
                     */
                    (str) => this._base64toHEX(str)), data.hashAlg.toLocaleLowerCase()));
                }));
            }
            else {
                response.signature = jsEncrypt.sign(data.hash, (/**
                 * @param {?} str
                 * @return {?}
                 */
                (str) => {
                    return this._base64toHEX(str);
                }), data.hashAlg.toLocaleLowerCase());
            }
            resolve((/** @type {?} */ ({
                data: response
            })));
        }
        catch (e) {
            resolve((/** @type {?} */ ({
                error: "SIGN_ERROR",
                errorMsg: e.message
            })));
        }
    }
    /**
     * @param {?} serial
     * @return {?}
     */
    static _getCert(serial) {
        for (let i = 0; i < this._certs.length; i++) {
            if (this._certs[i].serial === serial) {
                return this._certs[i];
            }
        }
        return this._certs[0];
    }
    /**
     * @param {?} base64
     * @return {?}
     */
    static _base64toHEX(base64) {
        /** @type {?} */
        var raw = atob(base64);
        /** @type {?} */
        var HEX = '';
        for (let i = 0; i < raw.length; i++) {
            /** @type {?} */
            var _hex = raw.charCodeAt(i).toString(16);
            HEX += (_hex.length == 2 ? _hex : '0' + _hex);
        }
        return HEX;
    }
}
TokenSimulator._certs = [
    {
        subject: "C=VN, ST=HCM, L=HCM, O=Calista, OU=Calista, , CN=iNet Solutions Corporation",
        issuer: "C=VN, CN=Viettel-CA, O=iNet, OU=iNet Solutions",
        validFrom: "2019-07-06",
        validTo: "2030-07-07",
        serial: "843F1DF405009A62",
        cert: "MIICezCCAeQCCQCEPx30BQCaYjANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMC" +
            "Vk4xDDAKBgNVBAgMA0hDTTEMMAoGA1UEBwwDSENNMRAwDgYDVQQKDAdDYWxpc3Rh" +
            "MRAwDgYDVQQLDAdDYWxpc3RhMRAwDgYDVQQDDAdDYWxpc3RhMSAwHgYJKoZIhvcN" +
            "AQkBFhFpbmZvQGluZXRjbG91ZC52bjAeFw0xOTA3MDgwNjM2MDNaFw0yMDA3MDcw" +
            "NjM2MDNaMIGBMQswCQYDVQQGEwJWTjEMMAoGA1UECAwDSENNMQwwCgYDVQQHDANI" +
            "Q00xEDAOBgNVBAoMB0NhbGlzdGExEDAOBgNVBAsMB0NhbGlzdGExEDAOBgNVBAMM" +
            "B0NhbGlzdGExIDAeBgkqhkiG9w0BCQEWEWluZm9AaW5ldGNsb3VkLnZuMIGfMA0G" +
            "CSqGSIb3DQEBAQUAA4GNADCBiQKBgQCxetXFs9aXIX89WX/cqc6pvAqfA1bSTwEC" +
            "Qchv7Te/gHQJanYXBPOCpihJwa9jnKnI/S6y5KK+A6Ud/xO3CS6XWrJkd2AfGv1B" +
            "o5of/4S3Y+AXiygimG9h/UOqZVgQQgkQbQd/c1uBEBznL0nvfZcUsTPI1DpDC9UK" +
            "ZiUEWsaCTQIDAQABMA0GCSqGSIb3DQEBCwUAA4GBAITGgS2WPloMGmY6Z2zYyS3y" +
            "as+/B59nevh6so3JRmFduQ1Qu9OwTWU0pySd4g/5ZpuUPZkhlUzFOX+VKOxYmqpr" +
            "4T2u9yXtNau94NYFPOpvzQGsEaR5OP14Oy2u/RXUoucPsZ1GPX8QggsOTK1I4xXs" +
            "sOVgB1hlg0hdAKFQuXTC",
        pk: "MIICXAIBAAKBgQCxetXFs9aXIX89WX/cqc6pvAqfA1bSTwECQchv7Te/gHQJanYX" +
            "BPOCpihJwa9jnKnI/S6y5KK+A6Ud/xO3CS6XWrJkd2AfGv1Bo5of/4S3Y+AXiygi" +
            "mG9h/UOqZVgQQgkQbQd/c1uBEBznL0nvfZcUsTPI1DpDC9UKZiUEWsaCTQIDAQAB" +
            "AoGAM3xy73uQUR+CjgWctiL8tPi8DA0n7rLElCcJQo8KkR9uihy8TUk+azRQk7UA" +
            "cGFOT+RC29q/62ebSuxoh7y+KuZObhNT2wkqE7cjbB97HlAgZrQOf4rYG+vGN3nB" +
            "a3ZIzGq/NK+lxmpY7ZvAnA4v3yUWUmSsmbD3c5v/LzBSWgECQQDj1RSkFs27anTb" +
            "HfKW2IDbDwL/l2zHPiRdd4v7DUlzhsoKEA/YgqSM+b/jsJ5i3JrKmqftFYvNhQUo" +
            "SDcBXxjhAkEAx2wXaNTknWP7rfF++AGcqh61lSLkxABMRqEKU1XbAihmHd5KZw3H" +
            "V+VgN4hoOhOLOyPF5E1nE9rdm4rkFcm67QJBAMFKeP2Rvy9+7O8tZC/oNMIk5UVV" +
            "Aduz9AQ8NU1kA2n49BY/dEIa7GISTWNt56I2STkUpt10xyww66Q2SDxoouECQDKq" +
            "CYB+pd4+qpBUjFdhwXWO+7758HjDQp2nCEKHy25O6TKpaOmpnH1+LuWs6B3pHTRX" +
            "ME2CRK/MqQR9UtkeOTkCQBV7PYWgWshl/vz6pvu4bDtIwL1IxAd4+Ig50gYHPZtG" +
            "whnZfWGcgraHy6W7GHhfskABTC9nm9DgdYLO6XpfvVQ="
    },
    {
        subject: "C=VN, ST=HCM, L=HCM, O=Vinaco, OU=Vinaco, CN=Vinaco Corporation",
        issuer: "C=VN, CN=Viettel-CA, O=iNet, OU=iNet Solutions",
        validFrom: "2019-07-06",
        validTo: "2030-07-07",
        serial: "99184098D6747AFA",
        cert: "MIICczCCAdwCCQCZGECY1nR6+jANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJW" +
            "TjEMMAoGA1UECAwDSENNMQwwCgYDVQQHDANIQ00xDzANBgNVBAoMBlZpbmFjbzEP" +
            "MA0GA1UECwwGVmluYWNvMQ8wDQYDVQQDDAZWaW5hY28xIDAeBgkqhkiG9w0BCQEW" +
            "EWluZm9AaW5ldGNsb3VkLnZuMB4XDTE5MDcwODA2MzQxMFoXDTIwMDcwNzA2MzQx" +
            "MFowfjELMAkGA1UEBhMCVk4xDDAKBgNVBAgMA0hDTTEMMAoGA1UEBwwDSENNMQ8w" +
            "DQYDVQQKDAZWaW5hY28xDzANBgNVBAsMBlZpbmFjbzEPMA0GA1UEAwwGVmluYWNv" +
            "MSAwHgYJKoZIhvcNAQkBFhFpbmZvQGluZXRjbG91ZC52bjCBnzANBgkqhkiG9w0B" +
            "AQEFAAOBjQAwgYkCgYEA3K8A4TKSOGQQepR0ZWPIdi0ABnLXtYKqUdS84XIvCbCD" +
            "60v7Rj8x/0YpLd99MMVfS1B3ZBF2XoCeE/qAg8BdtjSgnvHpyQX4vy9DRnKj56jJ" +
            "TR0PX5njeG3xpToXjubusB70LVDqDSNERsmBga66oBbIDOtQj58dm3Dms4cyfCcC" +
            "AwEAATANBgkqhkiG9w0BAQsFAAOBgQDPHQKecmW65R1Sng0A/HWHC71UvEGdshgK" +
            "fODIlICjo0bX3n67Eu+m+VRFCKjWas9bYoPLQRx2m2F0qkdiim3iuKZf+0wYvXBk" +
            "iDuPpoKG2Zq+aAFIh7H1qjgR34H96g3frl8dN5BQK4PFibrq24lxQuW2OvVwSOiz" +
            "bar1/bl+jw==",
        pk: "MIICWwIBAAKBgQDcrwDhMpI4ZBB6lHRlY8h2LQAGcte1gqpR1Lzhci8JsIPrS/tG" +
            "PzH/Rikt330wxV9LUHdkEXZegJ4T+oCDwF22NKCe8enJBfi/L0NGcqPnqMlNHQ9f" +
            "meN4bfGlOheO5u6wHvQtUOoNI0RGyYGBrrqgFsgM61CPnx2bcOazhzJ8JwIDAQAB" +
            "AoGAKKkJ5XQ24rL1IlC1/XRcHAIAji+ctPHFRdyHjJZIOmXOeI0AWBoOsTURI0WZ" +
            "QGItQ6gox0Q8Zf8WoSG3ig7odPEswLVqH/cr/0IsQ4yIMKlsw5JqizLq5Opcik61" +
            "dH6wpLjVrNRcv2h/JVvmKdAo5K+KEwZ8UNmmEZK5O5cAssECQQD1qubI7/y4OWwQ" +
            "PUYD9ZCocLWDLn34oBxN8ayNnLp/N4/D78jhpsDKSSPIcTFFSZVf4FplcEZS8f94" +
            "fikFZmKHAkEA5fcZkwad0z/w5OahX0YHFRe3vNt7up4KEocXXgVETM79Yp6tiMbE" +
            "+aEOtslBSfGAPiEIm46tXb9f0/ffid5hYQJAFm1uukNmf+8GFYlyfeQKO8ZmW75/" +
            "05XSX69DgH4hbIHHBy052pfdm9oHgUIMLHYmQ+V4ezA/y0y6dOaXmh2ZuwJAN815" +
            "UDsXyy5F51WrrPHSQCUMOfDMmmFFMm/DlNYUV8sWo3q7w2fwXl7dsi8t/6JxqyHa" +
            "89xwZ0JMH6STguIKoQJAV/UVZO/8kpxbygpR4jlyA4cSrbb7bId8fk421CXivjcI" +
            "JPRTHaTtJleJhITyPf48F/wwr0d62ENnuLLLv2QiRw=="
    }
];
if (false) {
    /** @type {?} */
    TokenSimulator._certs;
}
//# sourceMappingURL=data:application/json;base64,