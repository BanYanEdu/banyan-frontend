import { AfterContentChecked, AfterViewChecked, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { MessageContact } from "../../model/MessageContact";
import { ChatMessageService } from "../../message.service";
import { MessageChatHolder } from "../../model/MessageHolder";
import { FileListComponent, FileListItem } from "../../filelist/list/file-list.component";
import { VideoConferenceService } from "../../video-conference.service";
import { OpenGraphService } from '../../open-graph/open-graph.service';
export declare class MessageChatComponent implements OnInit, OnChanges, OnDestroy, AfterViewChecked, AfterContentChecked {
    private openGraphService;
    private messageService;
    private videoService;
    private element;
    username: string;
    audioCall: boolean;
    videoCall: boolean;
    closable: boolean;
    onAudioCall: EventEmitter<MessageContact>;
    onVideoCall: EventEmitter<MessageContact>;
    onClose: EventEmitter<MessageContact>;
    input: ElementRef;
    messageBody: ElementRef;
    fileList: FileListComponent;
    videoPanelVisible: boolean;
    private linkRegex;
    contact: MessageContact;
    holders: MessageChatHolder[];
    files: any[];
    loading: boolean;
    profile: any;
    messageJoinCall: {};
    readonly canSend: boolean;
    readonly message: string;
    scrollTop: number;
    readonly scrollHeight: number;
    scrollBottom: number;
    private _scrollingTop;
    private _scrollBottom;
    private _lastScrollBottom;
    private _scrollNeedUpdate;
    private _hasMoreMsg;
    private _messageObserver;
    private __messageChat;
    private _params;
    constructor(openGraphService: OpenGraphService, messageService: ChatMessageService, videoService: VideoConferenceService, element: ElementRef);
    private _onDropFile;
    ngAfterContentChecked(): void;
    ngAfterViewChecked(): void;
    ngOnInit(): void;
    private _onBodyScroll;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    viewAttachment(e: {
        file: FileListItem;
    }): void;
    sendMessage(): void;
    sendMessageSocket(value: any): void;
    convertLinks(data: any): {};
    private _loadMessages;
    private _focus;
    private _scrollToBottom;
    private _clearInput;
    private _addMessages;
    private convertMessages;
    messageMissCall(): string;
    messageJoinedCall(duration: any): string;
    messageJoinedCallTo(duration: any): string;
    private convertArrayMessage;
    encodeBase64(str: string): string;
    decodeBase64(str: string): string;
    private _onLoad;
    private _sendSocket;
    private _sendPush;
    private _sendSuccess;
    joinRoom(audioOnly: boolean, usercode?: string): void;
    disposeRoom(): void;
}
