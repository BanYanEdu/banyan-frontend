import { decimalFormatted } from '../services/utilities';
import { getValueFromParamsOrGridOptions } from '../formatters/formatterUtilities';
export const avgTotalsPercentageFormatter = (totals, columnDef, grid) => {
    const field = columnDef.field || '';
    let val = totals.avg && totals.avg[field];
    const params = columnDef && columnDef.params;
    let prefix = params && params.groupFormatterPrefix || '';
    const suffix = params && params.groupFormatterSuffix || '';
    const minDecimal = getValueFromParamsOrGridOptions('minDecimal', columnDef, grid);
    const maxDecimal = getValueFromParamsOrGridOptions('maxDecimal', columnDef, grid);
    const displayNegativeNumberWithParentheses = getValueFromParamsOrGridOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    return `${prefix}(${Math.round(val)}%)${suffix}`;
                }
                return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal)}%)${suffix}`;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            return `${prefix}${Math.round(val)}%${suffix}`;
        }
        return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal)}%${suffix}`;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzUGVyY2VudGFnZUZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZ3JvdXBpbmctZm9ybWF0dGVycy9hdmdUb3RhbHNQZXJjZW50YWdlRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRW5GLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUF5QixDQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLElBQVUsRUFBRSxFQUFFO0lBQy9HLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxNQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRywrQkFBK0IsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sVUFBVSxHQUFHLCtCQUErQixDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEYsTUFBTSxvQ0FBb0MsR0FBRywrQkFBK0IsQ0FBQyxzQ0FBc0MsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtZQUNYLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxvQ0FBb0MsRUFBRTtnQkFDekMsTUFBTSxJQUFJLEdBQUcsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDMUMsT0FBTyxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sRUFBRSxDQUFDO2lCQUNsRDtnQkFDRCxPQUFPLEdBQUcsTUFBTSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLEtBQUssTUFBTSxFQUFFLENBQUM7YUFDaEY7U0FDRjtRQUVELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMxQyxPQUFPLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUM7U0FDaEQ7UUFDRCxPQUFPLEdBQUcsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUM7S0FDOUU7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgR3JvdXBUb3RhbHNGb3JtYXR0ZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IGRlY2ltYWxGb3JtYXR0ZWQgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9mb3JtYXR0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2Z1RvdGFsc1BlcmNlbnRhZ2VGb3JtYXR0ZXI6IEdyb3VwVG90YWxzRm9ybWF0dGVyID0gKHRvdGFsczogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZ3JpZD86IGFueSkgPT4ge1xyXG4gIGNvbnN0IGZpZWxkID0gY29sdW1uRGVmLmZpZWxkIHx8ICcnO1xyXG4gIGxldCB2YWwgPSB0b3RhbHMuYXZnICYmIHRvdGFscy5hdmdbZmllbGRdO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zO1xyXG4gIGxldCBwcmVmaXggPSBwYXJhbXMgJiYgcGFyYW1zLmdyb3VwRm9ybWF0dGVyUHJlZml4IHx8ICcnO1xyXG4gIGNvbnN0IHN1ZmZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJTdWZmaXggfHwgJyc7XHJcbiAgY29uc3QgbWluRGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMoJ21pbkRlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQpO1xyXG4gIGNvbnN0IG1heERlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zKCdtYXhEZWNpbWFsJywgY29sdW1uRGVmLCBncmlkKTtcclxuICBjb25zdCBkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zKCdkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMnLCBjb2x1bW5EZWYsIGdyaWQsIGZhbHNlKTtcclxuXHJcbiAgaWYgKHZhbCAhPSBudWxsICYmICFpc05hTigrdmFsKSkge1xyXG4gICAgaWYgKHZhbCA8IDApIHtcclxuICAgICAgdmFsID0gTWF0aC5hYnModmFsKTtcclxuICAgICAgaWYgKCFkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMpIHtcclxuICAgICAgICBwcmVmaXggKz0gJy0nO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpc05hTihtaW5EZWNpbWFsKSAmJiBpc05hTihtYXhEZWNpbWFsKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0oJHtNYXRoLnJvdW5kKHZhbCl9JSkke3N1ZmZpeH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYCR7cHJlZml4fSgke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsKX0lKSR7c3VmZml4fWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNOYU4obWluRGVjaW1hbCkgJiYgaXNOYU4obWF4RGVjaW1hbCkpIHtcclxuICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke01hdGgucm91bmQodmFsKX0lJHtzdWZmaXh9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBgJHtwcmVmaXh9JHtkZWNpbWFsRm9ybWF0dGVkKHZhbCwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCl9JSR7c3VmZml4fWA7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufTtcclxuIl19