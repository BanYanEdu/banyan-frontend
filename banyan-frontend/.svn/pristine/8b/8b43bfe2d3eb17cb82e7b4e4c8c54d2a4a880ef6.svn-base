/** Execute the Backend Processes Callback, that could come from an Observable or a Promise callback */
export function executeBackendProcessesCallback(startTime, processResult, backendApi, gridOptions) {
    const endTime = new Date();
    // define what our internal Post Process callback, only available for GraphQL Service for now
    // it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time
    if (processResult && backendApi && backendApi.internalPostProcess) {
        backendApi.internalPostProcess(processResult);
    }
    // send the response process to the postProcess callback
    if (backendApi.postProcess) {
        if (processResult instanceof Object) {
            processResult.statistics = {
                startTime,
                endTime,
                executionTime: endTime.valueOf() - startTime.valueOf(),
                itemCount: gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems,
                totalItemCount: gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems
            };
        }
        backendApi.postProcess(processResult);
    }
}
/** On a backend service api error, we will run the "onError" if there is 1 provided or just throw back the error when nothing is provided */
export function onBackendError(e, backendApi) {
    if (backendApi && backendApi.onError) {
        backendApi.onError(e);
    }
    else {
        throw e;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC11dGlsaXRpZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL3NlcnZpY2VzL2JhY2tlbmQtdXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLHVHQUF1RztBQUN2RyxNQUFNLFVBQVUsK0JBQStCLENBQUMsU0FBZSxFQUFFLGFBQWtDLEVBQUUsVUFBNkIsRUFBRSxXQUF1QjtJQUN6SixNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRTNCLDZGQUE2RjtJQUM3RixzSEFBc0g7SUFDdEgsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRTtRQUNqRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDL0M7SUFFRCx3REFBd0Q7SUFDeEQsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO1FBQzFCLElBQUksYUFBYSxZQUFZLE1BQU0sRUFBRTtZQUNuQyxhQUFhLENBQUMsVUFBVSxHQUFHO2dCQUN6QixTQUFTO2dCQUNULE9BQU87Z0JBQ1AsYUFBYSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFO2dCQUN0RCxTQUFTLEVBQUUsV0FBVyxJQUFJLFdBQVcsQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxVQUFVO2dCQUNyRixjQUFjLEVBQUUsV0FBVyxJQUFJLFdBQVcsQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxVQUFVO2FBQzNGLENBQUM7U0FDSDtRQUNELFVBQVUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDdkM7QUFDSCxDQUFDO0FBRUQsNklBQTZJO0FBQzdJLE1BQU0sVUFBVyxjQUFjLENBQUMsQ0FBTSxFQUFFLFVBQTZCO0lBQ25FLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUU7UUFDcEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2QjtTQUFNO1FBQ0wsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaHFsUmVzdWx0IH0gZnJvbSAnLi4vbW9kZWxzL2dyYXBocWxSZXN1bHQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgQmFja2VuZFNlcnZpY2VBcGkgfSBmcm9tICcuLi9tb2RlbHMvYmFja2VuZFNlcnZpY2VBcGkuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgR3JpZE9wdGlvbiB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG4vKiogRXhlY3V0ZSB0aGUgQmFja2VuZCBQcm9jZXNzZXMgQ2FsbGJhY2ssIHRoYXQgY291bGQgY29tZSBmcm9tIGFuIE9ic2VydmFibGUgb3IgYSBQcm9taXNlIGNhbGxiYWNrICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlQmFja2VuZFByb2Nlc3Nlc0NhbGxiYWNrKHN0YXJ0VGltZTogRGF0ZSwgcHJvY2Vzc1Jlc3VsdDogR3JhcGhxbFJlc3VsdCB8IGFueSwgYmFja2VuZEFwaTogQmFja2VuZFNlcnZpY2VBcGksIGdyaWRPcHRpb25zOiBHcmlkT3B0aW9uKTogR3JhcGhxbFJlc3VsdCB8IGFueSB7XHJcbiAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gIC8vIGRlZmluZSB3aGF0IG91ciBpbnRlcm5hbCBQb3N0IFByb2Nlc3MgY2FsbGJhY2ssIG9ubHkgYXZhaWxhYmxlIGZvciBHcmFwaFFMIFNlcnZpY2UgZm9yIG5vd1xyXG4gIC8vIGl0IHdpbGwgYmFzaWNhbGx5IHJlZnJlc2ggdGhlIERhdGFzZXQgJiBQYWdpbmF0aW9uIHdpdGhvdXQgaGF2aW5nIHRoZSB1c2VyIHRvIGNyZWF0ZSBoaXMgb3duIFBvc3RQcm9jZXNzIGV2ZXJ5IHRpbWVcclxuICBpZiAocHJvY2Vzc1Jlc3VsdCAmJiBiYWNrZW5kQXBpICYmIGJhY2tlbmRBcGkuaW50ZXJuYWxQb3N0UHJvY2Vzcykge1xyXG4gICAgYmFja2VuZEFwaS5pbnRlcm5hbFBvc3RQcm9jZXNzKHByb2Nlc3NSZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgLy8gc2VuZCB0aGUgcmVzcG9uc2UgcHJvY2VzcyB0byB0aGUgcG9zdFByb2Nlc3MgY2FsbGJhY2tcclxuICBpZiAoYmFja2VuZEFwaS5wb3N0UHJvY2Vzcykge1xyXG4gICAgaWYgKHByb2Nlc3NSZXN1bHQgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgcHJvY2Vzc1Jlc3VsdC5zdGF0aXN0aWNzID0ge1xyXG4gICAgICAgIHN0YXJ0VGltZSxcclxuICAgICAgICBlbmRUaW1lLFxyXG4gICAgICAgIGV4ZWN1dGlvblRpbWU6IGVuZFRpbWUudmFsdWVPZigpIC0gc3RhcnRUaW1lLnZhbHVlT2YoKSxcclxuICAgICAgICBpdGVtQ291bnQ6IGdyaWRPcHRpb25zICYmIGdyaWRPcHRpb25zLnBhZ2luYXRpb24gJiYgZ3JpZE9wdGlvbnMucGFnaW5hdGlvbi50b3RhbEl0ZW1zLFxyXG4gICAgICAgIHRvdGFsSXRlbUNvdW50OiBncmlkT3B0aW9ucyAmJiBncmlkT3B0aW9ucy5wYWdpbmF0aW9uICYmIGdyaWRPcHRpb25zLnBhZ2luYXRpb24udG90YWxJdGVtc1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgYmFja2VuZEFwaS5wb3N0UHJvY2Vzcyhwcm9jZXNzUmVzdWx0KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKiBPbiBhIGJhY2tlbmQgc2VydmljZSBhcGkgZXJyb3IsIHdlIHdpbGwgcnVuIHRoZSBcIm9uRXJyb3JcIiBpZiB0aGVyZSBpcyAxIHByb3ZpZGVkIG9yIGp1c3QgdGhyb3cgYmFjayB0aGUgZXJyb3Igd2hlbiBub3RoaW5nIGlzIHByb3ZpZGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiAgb25CYWNrZW5kRXJyb3IoZTogYW55LCBiYWNrZW5kQXBpOiBCYWNrZW5kU2VydmljZUFwaSkge1xyXG4gIGlmIChiYWNrZW5kQXBpICYmIGJhY2tlbmRBcGkub25FcnJvcikge1xyXG4gICAgYmFja2VuZEFwaS5vbkVycm9yKGUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBlO1xyXG4gIH1cclxufVxyXG4iXX0=