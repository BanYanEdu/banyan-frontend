String.format = function (format, args) {
    // const args = (Array.isArray(arguments[1])) ? arguments[1] : Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function (match, number) {
        return (typeof args[number] !== 'undefined') ? args[number] : match;
    });
};
String.padZero = function (length) {
    var s = this;
    while (s.length < length) {
        s = '0' + s;
    }
    return s;
};
/**
 * Trim any extra white space from the string
 * @param string inputStr
 * @returns string outputStr
 */
String.trim = function (inputStr) {
    return inputStr ? inputStr.replace(/\s+/g, ' ') : inputStr;
};
/**
 * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)
 * @param string inputStr
 * @returns string outputStr
 */
String.allTitleCase = function (inputStr) {
    return inputStr.replace(/\w\S*/g, function (outputStr) {
        return outputStr.charAt(0).toUpperCase() + outputStr.substr(1).toLowerCase();
    });
};
/**
 * Title case the complete sentence (upper case first char of each word while changing everything else to lower case)
 * @param string inputStr
 * @returns string outputStr
*/
String.titleCase = function (inputStr) {
    return inputStr.charAt(0).toUpperCase() + inputStr.slice(1);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLXV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc2VydmljZXMvZ2xvYmFsLXV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQSxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVMsTUFBYyxFQUFFLElBQUk7SUFDM0Msd0dBQXdHO0lBRXhHLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBVSxLQUFLLEVBQUUsTUFBTTtRQUN2RCxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUF3QixNQUFjO0lBQ3JELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNiLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUU7UUFDeEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDYjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBUyxRQUFnQjtJQUNyQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3RCxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLFlBQVksR0FBRyxVQUFTLFFBQWdCO0lBQzdDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBUyxTQUFTO1FBQ2pELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hGLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUY7Ozs7RUFJRTtBQUNGLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBUyxRQUFnQjtJQUMxQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIGludGVyZmFjZSBTdHJpbmdDb25zdHJ1Y3RvciB7XHJcbiAgYWxsVGl0bGVDYXNlKGlucHV0U3RyOiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgZm9ybWF0KGlucHV0U3RyOiBzdHJpbmcsIGFyZ3M6IGFueSk6IHN0cmluZztcclxuICBwYWRaZXJvKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nO1xyXG4gIHRyaW0oaW5wdXRTdHI6IHN0cmluZyk6IHN0cmluZztcclxuICB0aXRsZUNhc2UoaW5wdXRTdHI6IHN0cmluZyk6IHN0cmluZztcclxufVxyXG5cclxuXHJcblN0cmluZy5mb3JtYXQgPSBmdW5jdGlvbihmb3JtYXQ6IHN0cmluZywgYXJncyk6IHN0cmluZyB7XHJcbiAgLy8gY29uc3QgYXJncyA9IChBcnJheS5pc0FycmF5KGFyZ3VtZW50c1sxXSkpID8gYXJndW1lbnRzWzFdIDogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHJcbiAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC97KFxcZCspfS9nLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlcikge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgYXJnc1tudW1iZXJdICE9PSAndW5kZWZpbmVkJykgPyBhcmdzW251bWJlcl0gOiBtYXRjaDtcclxuICB9KTtcclxufTtcclxuXHJcblN0cmluZy5wYWRaZXJvID0gZnVuY3Rpb24gKHRoaXM6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIpIHtcclxuICBsZXQgcyA9IHRoaXM7XHJcbiAgd2hpbGUgKHMubGVuZ3RoIDwgbGVuZ3RoKSB7XHJcbiAgICBzID0gJzAnICsgcztcclxuICB9XHJcbiAgcmV0dXJuIHM7XHJcbn07XHJcblxyXG4vKipcclxuICogVHJpbSBhbnkgZXh0cmEgd2hpdGUgc3BhY2UgZnJvbSB0aGUgc3RyaW5nXHJcbiAqIEBwYXJhbSBzdHJpbmcgaW5wdXRTdHJcclxuICogQHJldHVybnMgc3RyaW5nIG91dHB1dFN0clxyXG4gKi9cclxuU3RyaW5nLnRyaW0gPSBmdW5jdGlvbihpbnB1dFN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gaW5wdXRTdHIgPyBpbnB1dFN0ci5yZXBsYWNlKC9cXHMrL2csICcgJykgOiBpbnB1dFN0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaXRsZSBjYXNlIHRoZSBjb21wbGV0ZSBzZW50ZW5jZSAodXBwZXIgY2FzZSBmaXJzdCBjaGFyIG9mIGVhY2ggd29yZCB3aGlsZSBjaGFuZ2luZyBldmVyeXRoaW5nIGVsc2UgdG8gbG93ZXIgY2FzZSlcclxuICogQHBhcmFtIHN0cmluZyBpbnB1dFN0clxyXG4gKiBAcmV0dXJucyBzdHJpbmcgb3V0cHV0U3RyXHJcbiAqL1xyXG5TdHJpbmcuYWxsVGl0bGVDYXNlID0gZnVuY3Rpb24oaW5wdXRTdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGlucHV0U3RyLnJlcGxhY2UoL1xcd1xcUyovZywgZnVuY3Rpb24ob3V0cHV0U3RyKSB7XHJcbiAgICAgcmV0dXJuIG91dHB1dFN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG91dHB1dFN0ci5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaXRsZSBjYXNlIHRoZSBjb21wbGV0ZSBzZW50ZW5jZSAodXBwZXIgY2FzZSBmaXJzdCBjaGFyIG9mIGVhY2ggd29yZCB3aGlsZSBjaGFuZ2luZyBldmVyeXRoaW5nIGVsc2UgdG8gbG93ZXIgY2FzZSlcclxuICogQHBhcmFtIHN0cmluZyBpbnB1dFN0clxyXG4gKiBAcmV0dXJucyBzdHJpbmcgb3V0cHV0U3RyXHJcbiovXHJcblN0cmluZy50aXRsZUNhc2UgPSBmdW5jdGlvbihpbnB1dFN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gaW5wdXRTdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBpbnB1dFN0ci5zbGljZSgxKTtcclxufTtcclxuIl19