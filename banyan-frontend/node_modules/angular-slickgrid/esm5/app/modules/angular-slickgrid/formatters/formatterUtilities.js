import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import * as moment_ from 'moment-mini';
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
/**
 * Find the option value from the following (in order of execution)
 * 1- Column Definition "params"
 * 2- Grid Options "formatterOptions"
 * 3- nothing found, return default value provided
 */
export function getValueFromParamsOrGridOptions(optionName, columnDef, grid, defaultValue) {
    var gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
    var params = columnDef && columnDef.params;
    if (params && params.hasOwnProperty(optionName)) {
        return params[optionName];
    }
    else if (gridOptions.formatterOptions && gridOptions.formatterOptions.hasOwnProperty(optionName)) {
        return gridOptions.formatterOptions[optionName];
    }
    return defaultValue;
}
/** From a FieldType, return the associated date Formatter */
export function getAssociatedDateFormatter(fieldType, defaultSeparator) {
    var defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);
    return function (row, cell, value, columnDef, dataContext, grid) {
        var gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
        var customSeparator = gridOptions && gridOptions.formatterOptions && gridOptions.formatterOptions.dateSeparator || defaultSeparator;
        var isDateValid = moment(value, defaultDateFormat, false).isValid();
        var outputDate = (value && isDateValid) ? moment(value).format(defaultDateFormat) : value;
        // user can customize the separator through the "formatterOptions"
        // if that is the case we need to replace the default "/" to the new separator
        if (outputDate && customSeparator !== defaultSeparator) {
            var regex = new RegExp(defaultSeparator, 'ig'); // find separator globally
            outputDate = outputDate.replace(regex, customSeparator);
        }
        return outputDate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2Zvcm1hdHRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RSxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUk7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsK0JBQStCLENBQUMsVUFBa0IsRUFBRSxTQUFpQixFQUFFLElBQVMsRUFBRSxZQUFrQjtJQUNsSCxJQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQWUsQ0FBQztJQUM3RyxJQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUU3QyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzNCO1NBQU0sSUFBSSxXQUFXLENBQUMsZ0JBQWdCLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNsRyxPQUFPLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNqRDtJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRCw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFNBQW9CLEVBQUUsZ0JBQXdCO0lBQ3ZGLElBQU0saUJBQWlCLEdBQUcsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEUsT0FBTyxVQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTO1FBQzNGLElBQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBZSxDQUFDO1FBQzdHLElBQU0sZUFBZSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsSUFBSSxnQkFBZ0IsQ0FBQztRQUV0SSxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RFLElBQUksVUFBVSxHQUFHLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUUxRixrRUFBa0U7UUFDbEUsOEVBQThFO1FBQzlFLElBQUksVUFBVSxJQUFJLGVBQWUsS0FBSyxnQkFBZ0IsRUFBRTtZQUN0RCxJQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtZQUM1RSxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDekQ7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBGaWVsZFR5cGUsIEZvcm1hdHRlciwgR3JpZE9wdGlvbiB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XG5pbXBvcnQgeyBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudC1taW5pJztcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgXCJtb21lbnQgaGFzIG5vIGRlZmF1bHQgZXhwb3J0XCIgaXNzdWUsIGRvY3VtZW50IGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzY3MFxuXG4vKipcbiAqIEZpbmQgdGhlIG9wdGlvbiB2YWx1ZSBmcm9tIHRoZSBmb2xsb3dpbmcgKGluIG9yZGVyIG9mIGV4ZWN1dGlvbilcbiAqIDEtIENvbHVtbiBEZWZpbml0aW9uIFwicGFyYW1zXCJcbiAqIDItIEdyaWQgT3B0aW9ucyBcImZvcm1hdHRlck9wdGlvbnNcIlxuICogMy0gbm90aGluZyBmb3VuZCwgcmV0dXJuIGRlZmF1bHQgdmFsdWUgcHJvdmlkZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRnJvbVBhcmFtc09yR3JpZE9wdGlvbnMob3B0aW9uTmFtZTogc3RyaW5nLCBjb2x1bW5EZWY6IENvbHVtbiwgZ3JpZDogYW55LCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgY29uc3QgZ3JpZE9wdGlvbnMgPSAoKGdyaWQgJiYgdHlwZW9mIGdyaWQuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgPyBncmlkLmdldE9wdGlvbnMoKSA6IHt9KSBhcyBHcmlkT3B0aW9uO1xuICBjb25zdCBwYXJhbXMgPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLnBhcmFtcztcblxuICBpZiAocGFyYW1zICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25OYW1lKSkge1xuICAgIHJldHVybiBwYXJhbXNbb3B0aW9uTmFtZV07XG4gIH0gZWxzZSBpZiAoZ3JpZE9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucyAmJiBncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbk5hbWUpKSB7XG4gICAgcmV0dXJuIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnNbb3B0aW9uTmFtZV07XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqIEZyb20gYSBGaWVsZFR5cGUsIHJldHVybiB0aGUgYXNzb2NpYXRlZCBkYXRlIEZvcm1hdHRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFzc29jaWF0ZWREYXRlRm9ybWF0dGVyKGZpZWxkVHlwZTogRmllbGRUeXBlLCBkZWZhdWx0U2VwYXJhdG9yOiBzdHJpbmcpOiBGb3JtYXR0ZXIge1xuICBjb25zdCBkZWZhdWx0RGF0ZUZvcm1hdCA9IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKGZpZWxkVHlwZSk7XG5cbiAgcmV0dXJuIChyb3c6IG51bWJlciwgY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZGF0YUNvbnRleHQ6IGFueSwgZ3JpZDogYW55KSA9PiB7XG4gICAgY29uc3QgZ3JpZE9wdGlvbnMgPSAoKGdyaWQgJiYgdHlwZW9mIGdyaWQuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgPyBncmlkLmdldE9wdGlvbnMoKSA6IHt9KSBhcyBHcmlkT3B0aW9uO1xuICAgIGNvbnN0IGN1c3RvbVNlcGFyYXRvciA9IGdyaWRPcHRpb25zICYmIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMgJiYgZ3JpZE9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucy5kYXRlU2VwYXJhdG9yIHx8IGRlZmF1bHRTZXBhcmF0b3I7XG5cbiAgICBjb25zdCBpc0RhdGVWYWxpZCA9IG1vbWVudCh2YWx1ZSwgZGVmYXVsdERhdGVGb3JtYXQsIGZhbHNlKS5pc1ZhbGlkKCk7XG4gICAgbGV0IG91dHB1dERhdGUgPSAodmFsdWUgJiYgaXNEYXRlVmFsaWQpID8gbW9tZW50KHZhbHVlKS5mb3JtYXQoZGVmYXVsdERhdGVGb3JtYXQpIDogdmFsdWU7XG5cbiAgICAvLyB1c2VyIGNhbiBjdXN0b21pemUgdGhlIHNlcGFyYXRvciB0aHJvdWdoIHRoZSBcImZvcm1hdHRlck9wdGlvbnNcIlxuICAgIC8vIGlmIHRoYXQgaXMgdGhlIGNhc2Ugd2UgbmVlZCB0byByZXBsYWNlIHRoZSBkZWZhdWx0IFwiL1wiIHRvIHRoZSBuZXcgc2VwYXJhdG9yXG4gICAgaWYgKG91dHB1dERhdGUgJiYgY3VzdG9tU2VwYXJhdG9yICE9PSBkZWZhdWx0U2VwYXJhdG9yKSB7XG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoZGVmYXVsdFNlcGFyYXRvciwgJ2lnJyk7IC8vIGZpbmQgc2VwYXJhdG9yIGdsb2JhbGx5XG4gICAgICBvdXRwdXREYXRlID0gb3V0cHV0RGF0ZS5yZXBsYWNlKHJlZ2V4LCBjdXN0b21TZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXREYXRlO1xuICB9O1xufVxuIl19