import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrGridOptions } from './formatterUtilities';
export const decimalFormatter = (row, cell, value, columnDef, dataContext, grid) => {
    const isNumber = (value === null || value === undefined || value === '') ? false : !isNaN(+value);
    const params = columnDef.params || {};
    let minDecimal = getValueFromParamsOrGridOptions('minDecimal', columnDef, grid, 2);
    let maxDecimal = getValueFromParamsOrGridOptions('maxDecimal', columnDef, grid, 2);
    const displayNegativeNumberWithParentheses = getValueFromParamsOrGridOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    // @deprecated: decimalPlaces, minDecimalPlaces, maxDecimalPlaces
    // add these extra checks to support previous way of passing the decimal count
    if ((params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces)) {
        minDecimal = (params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces);
    }
    if (params.maxDecimalPlaces !== null && params.maxDecimalPlaces) {
        maxDecimal = (params.maxDecimalPlaces !== null && params.maxDecimalPlaces);
    }
    if (isNumber) {
        return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses);
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbEZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9kZWNpbWFsRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV2RSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBYyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTLEVBQUUsRUFBRTtJQUNuSSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUN0QyxJQUFJLFVBQVUsR0FBRywrQkFBK0IsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRixJQUFJLFVBQVUsR0FBRywrQkFBK0IsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRixNQUFNLG9DQUFvQyxHQUFHLCtCQUErQixDQUFDLHNDQUFzQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFN0ksaUVBQWlFO0lBQ2pFLDhFQUE4RTtJQUM5RSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUM1SCxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3ZJO0lBQ0QsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtRQUMvRCxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzVFO0lBRUQsSUFBSSxRQUFRLEVBQUU7UUFDWixPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0tBQzFGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgZm9ybWF0TnVtYmVyIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zIH0gZnJvbSAnLi9mb3JtYXR0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlY2ltYWxGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IChyb3c6IG51bWJlciwgY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZGF0YUNvbnRleHQ6IGFueSwgZ3JpZDogYW55KSA9PiB7XHJcbiAgY29uc3QgaXNOdW1iZXIgPSAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpID8gZmFsc2UgOiAhaXNOYU4oK3ZhbHVlKTtcclxuICBjb25zdCBwYXJhbXMgPSBjb2x1bW5EZWYucGFyYW1zIHx8IHt9O1xyXG4gIGxldCBtaW5EZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JHcmlkT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCwgMik7XHJcbiAgbGV0IG1heERlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zKCdtYXhEZWNpbWFsJywgY29sdW1uRGVmLCBncmlkLCAyKTtcclxuICBjb25zdCBkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckdyaWRPcHRpb25zKCdkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMnLCBjb2x1bW5EZWYsIGdyaWQsIGZhbHNlKTtcclxuXHJcbiAgLy8gQGRlcHJlY2F0ZWQ6IGRlY2ltYWxQbGFjZXMsIG1pbkRlY2ltYWxQbGFjZXMsIG1heERlY2ltYWxQbGFjZXNcclxuICAvLyBhZGQgdGhlc2UgZXh0cmEgY2hlY2tzIHRvIHN1cHBvcnQgcHJldmlvdXMgd2F5IG9mIHBhc3NpbmcgdGhlIGRlY2ltYWwgY291bnRcclxuICBpZiAoKHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzKSB8fCAocGFyYW1zLmRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLmRlY2ltYWxQbGFjZXMpKSB7XHJcbiAgICBtaW5EZWNpbWFsID0gKHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzKSB8fCAocGFyYW1zLmRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLmRlY2ltYWxQbGFjZXMpO1xyXG4gIH1cclxuICBpZiAocGFyYW1zLm1heERlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1heERlY2ltYWxQbGFjZXMpIHtcclxuICAgIG1heERlY2ltYWwgPSAocGFyYW1zLm1heERlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1heERlY2ltYWxQbGFjZXMpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTnVtYmVyKSB7XHJcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHZhbHVlLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsLCBkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMpO1xyXG4gIH1cclxuICByZXR1cm4gdmFsdWU7XHJcbn07XHJcblxyXG4iXX0=