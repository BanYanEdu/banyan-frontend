import { CalEvent } from "./model/CalEvent";
import { CalAttendeeType } from "./model/CalAttendeeType";
import { CalType } from "./model/CalType";
import { CalCategory } from "./model/CalCategory";
import { CalAttendeeRole } from "./model/CalAttendeeRole";
import { CalSubType } from "./model/CalSubType";
import { CalMode } from "./model/CalMode";
import { CalendarCar } from "./CalendarCar";
import { DictionaryData, SubFirmDictionary } from "./subfirm/Dictionary";
import { CalAttendeeState } from "./model/CalAttendeeState";
import { CalAttendee } from "./model/CalAttendee";
export declare class CalBuilder {
    isAuth: boolean;
    orgid: string;
    TIME_NEW_UPDATE: number;
    roleUrl: string;
    MODE: typeof CalMode;
    ROLE: typeof CalAttendeeRole;
    calSubType: typeof CalSubType;
    calCategory: typeof CalCategory;
    vnToLatin: (str: string) => string;
    dateUtils: {
        firstDay: number;
        getWeekRange(date: Date, firstDay?: any): {
            startWeek: any;
            endWeek: Date;
        };
        getDayIndexOnWeek(date: Date, firstDay?: any): number;
        getDateStartWeek(date: Date, firstDay?: any): Date;
        getDateEndWeek(date: Date, firstDay?: any): Date;
        dayOfYear(date: Date): number;
        getWeek(date: Date, firstDay?: any): number;
        getDateFromWeek(w: number, y: number): Date;
        dateIsToday(date: any): boolean;
        weekIsToday(date: any): boolean;
        isSameWeek(a: Date, b: Date): boolean;
    };
    calAttendeeType: typeof CalAttendeeType;
    calAttendeeState: typeof CalAttendeeState;
    calType: typeof CalType;
    subFirmDic: SubFirmDictionary;
    carUtils: CalendarCar;
    configs: import("./CalConfigs").CalConfigItem[];
    resources: {
        days: string[];
        statuses: string[];
        allDay: string;
        hour: string;
        minute: string;
    };
    _userRoles: {};
    _mapEvents: {};
    _cacheStore: any;
    _queue: {};
    _organs: any[];
    _myOrgans: any[];
    _applyConfig(): void;
    typeIsDepartment: (type: string) => boolean;
    typeIsCommunity: (type: string) => boolean;
    typeIsOrganization: (type: string) => boolean;
    catIsInvitation: (category: string) => boolean;
    catIsPersonal: (category: string) => boolean;
    catIsCar: (category: string) => boolean;
    catIsImportant: (category: string) => boolean;
    formatDateStr: (date: any) => string;
    formatTimeStr: (date: any) => string;
    formatDateTimeStr: (date: any) => string;
    formatDate: (date: any, format: any) => string;
    getConfigValue(name: string): any;
    getConfigObj(name: string): import("./CalConfigs").CalConfigItem;
    addQueue(name: any, executor: any, callback: any): void;
    ready(callback: any, options?: any): void;
    cacheSessionStorage(key: string, value?: any): any;
    cacheDataTemp(key: any, data?: any): any;
    setOrgId(orgid: string): void;
    getOrgId(): any;
    _cacheOrgId(orgid?: any): string;
    getHourMinute(date?: any): any;
    create(form: any, success: any, options?: any): any;
    updateEventByRole(params: any, success: any, options?: any): void;
    update(form: any, success: any, options?: any): any;
    reviewUpdate(form: any, success: any, options?: any): any;
    ownerReviewUpdate(form: any, success: any, options?: any): any;
    remove(params: any, callback: any, options?: any): any;
    cancel(params: any, success: any, options?: any): void;
    reviewNotify(params: any, success: any, options?: any): any;
    reviewCancel(params: any, success: any, options?: any): any;
    ownerReviewCancel(params: any, success: any, options?: any): any;
    deleteAttachment(params: any, success: any, options?: any): any;
    loadOrganMembers(organId: string, callback: Function, options?: any): void;
    searchAttendee(params: any, success: any, options?: any): void;
    _searchAttendee(params: any, success: any, options?: any): any;
    _indexAccount(account: any): any;
    loadDepartments(params: any, callback: any, options?: any): any;
    getMyOrg(callback: any, options?: any): any;
    visibleMyOrgans(organs: any): any;
    getAllOrg(callback: any, options?: any): any;
    visibleOrgans(organs: any): any;
    private _loadOrgans;
    getTreeOrg(callback: any, domain?: any): void;
    indexOrgSearch(item?: any): void;
    isMyOrg(orgid?: string): any;
    loadEvent(params: any, callback: any, options?: any): any;
    updateState(params: any, callback: any, options?: any): any;
    loadEventReview(params: any, success: any, options?: any): any;
    loadGroupEvent(params: any, success: any, options?: any): any;
    loadOrgEvents(params: any, callback: any, options: any): void;
    _loadOrgEvents(params: any, callback: any, options: any): any;
    loadCommunityEvents(params: any, callback: any, options: any): void;
    _loadCommunityEvents(params: any, callback: any, options: any): any;
    loadAllPublishEvents(params: any, callback: any, options: any): void;
    _loadAllPublishEvents(params: any, callback: any, options: any): any;
    loadPublishEvents(params: any, callback: Function, options?: any): void;
    getReviewEvents(params: any, callback: any, options: any): void;
    _getReviewEvents(params: any, callback: any, options: any): any;
    getViewEvents(params: any, callback: any, options: any): void;
    _getViewEvents(params: any, callback: any, options: any): any;
    reviewSearchEvents(params: any, callback: any, options: any): void;
    _reviewSearchEvents(params: any, callback: any, options: any): any;
    getOwnEvents(params: any, callback: any, options?: any): void;
    _getOwnEvents(params: any, callback: any, options: any): any;
    getListEvents(params: any, callback: any, options?: any): any;
    modifyEvent(events: any): any;
    removeEventDuplicate(events: any): any;
    sortEvents(events: any): any;
    sortEventStart(events: any): any;
    sortEventPriority(events: any): any;
    _sort(arr: any, orderBy?: any): void;
    searchEventsByKeywords(events: any, keywords: any): any;
    indexEvent(event: any): any;
    indexEventMembers(event: any): void;
    _groupMember2String(members: any): string;
    indexEventAttribute(event?: any): void;
    initEvent(calEvent: any): any;
    _initEventDate(event: CalEvent | any): void;
    indexEventDate(event: any): void;
    indexEventSearch(event: any): void;
    indexRepeat(event: any): void;
    indexCustom(event: any): void;
    getEventStatus: (mode: any) => string;
    isReviewer(orgid?: any): boolean;
    isOwnReviewer(orgid?: any): boolean;
    isViewer(orgid?: any): any;
    getQueryParams(query?: any): {};
    buildQueryString(params?: any): string;
    getUserAvatar(usercode: any, domain?: any): string;
    getPermissionOnEvent(event: any, callback: Function, currentOrganId?: any, options?: any): any;
    canUpdateOwnEvent(event: CalEvent): boolean;
    canReviewEvent(event: CalEvent): boolean;
    canOwnReviewEvent(event: CalEvent): boolean;
    canUpdateAttendee(event: CalEvent, ownOrganId: string): boolean;
    canExternalUpdateEvent(event: CalEvent, organId: string): boolean;
    isFirmEvent(event: CalEvent, ownOrganId: string): boolean;
    isCreate: (mode: number) => boolean;
    isPublish: (mode: number) => boolean;
    isSent: (mode: number) => boolean;
    isCancel: (mode: number) => boolean;
    isOther: (mode: number) => boolean;
    searchAnyAttendee(params: any, callback: any, options?: any): void;
    searchUserAsAttendee(params: any, callback: any, options?: any): void;
    searchOrganAsAttendee(params: any, callback: any, options?: any): void;
    insertPrefixAttendee(fullname: string): string;
    memberToAttendee(member: any): CalAttendee;
    organToAttendee(organ: any): CalAttendee;
    aliasToAttendee(alias: string, organId: string): CalAttendee;
    loadAttendeeByName(params: any, callback: any, options?: any): any;
    loadUserByKeyword(params: any, callback: any, options?: any): void;
    loadOrgByKeyword(params: any, callback: any, options?: any): void;
    getFileUrl(item: any, domain?: string, event?: CalEvent): string;
    getFileViewUrl(item: any, domain?: string, event?: CalEvent): string;
    hasFirmAttendee(event: CalEvent, organId: string): boolean;
    getOrgByUid(uuid: string): any;
    getOrgById(orgId: string): any;
    getOrgNameById(orgId: string): any;
    getOrgByPrefix(prefix: string): any;
    getUrlByOrgId(url: any, orgid: any, domain?: any): string;
    loadRole(orgid: any, callback: any, options?: any): any;
    loadRoles(organIds: any, callback: any, options?: any): void;
    generateEventWeekView(events: any, date?: any, firstDay?: any): any[];
    getLastUpdateSegEvents(segEvents: any): any;
    generateEventView(events: any, date: any): {
        day: number;
        display: string;
        dayStr: string;
        isToday: boolean;
        date: any;
        items: any;
    };
    getDisplayByDay(day?: any): string;
    buildMembers(members: any, role?: any): any;
    groupAttendeeByOrgan(attendees: CalAttendee[]): {};
    groupAttendeeByOrganRole(event: CalEvent, attendees: CalAttendee[], ownOrganId: string, callback: Function, options?: any): any;
    buildMemberStr(item?: any): any;
    buildMemberShow(members: any): any;
    modifyDataUpdate(data: any, event?: any): any;
    attendeeAddJson(attendee: CalAttendee): any;
    attendeeRemoveJson(attendee: CalAttendee): any;
    _convertOrg(data: any): any;
    viewEventOnModal(objectId: any): void;
    getEventByObjectId(objectId: any): any;
    getTextForMinutes(minutes?: any): string;
    groupEventBySession(events: any): {
        allday: any[];
        morning: any[];
        afternoon: any[];
        evening: any[];
    };
    groupEventByPerson(events: any, persons: any, date: any): {
        persons: any[];
        segEvents: any[];
    };
    groupEventByLeaders(events: CalEvent[], organId: string, callback: Function, options?: any): void;
    meIsCreator(event: CalEvent): boolean;
    attendeeIsMe(attendde: CalAttendee): boolean;
    attendeeDisplay(attendde: CalAttendee): any;
    attendeeValue(attendde: CalAttendee): any;
    formatTextDisplay(text: string): any;
    formatTextUpdate(text: string): any;
    memberIsAttendee(event: CalEvent, member: string): boolean;
    getAttendeeByUsername(event: CalEvent, username: string): CalAttendee;
    getAttendeeIsMe(event: CalEvent): CalAttendee;
    eventIsViewed(event: CalEvent): number | true;
    usernameIsMe(username: String): boolean;
    sendRequest(data: any, options?: any, cacheResponse?: any): any;
    postForm(data: any, options?: any): any;
    _buildAjaxOptions(data: any, options?: any): any;
    _getOrganOnInit(): any;
    groupEventByCar(cars: any, events: any): any[];
    filterMeetPeopleEvents(events: any): any;
    _loadOnDifferYear(executor: any, params: any, callback: any, options: any): void;
    loadMonthEvents(params: any, date: any, callback: any, options?: any): void;
    getExportUrl(calEvent: any, domain: any): string;
    getWeekParams(date: any): {
        year: any;
        from: number;
        to: number;
    };
    getRangeParams(from: any, to: any): {
        year: any;
        from: number;
        to: number;
    };
    dateEqualWeekParams(date: any, weekParams: any): boolean;
    eventIsOnRange(event: CalEvent, params?: any): boolean;
    verifyDuplicateEvents(params: any, callback: Function, options?: any): void;
    needVerifyDuplicate(params: any, event: any): boolean;
    subjectDisplayWithMaxLength(event: any): any;
    dictCreate(data: DictionaryData, callback: Function, options?: any): any;
    dictUpdate(data: DictionaryData, callback: Function, options?: any): any;
    dictRemove(data: DictionaryData, callback: Function, options?: any): any;
    dictList(params: any, callback: Function, options?: any, cacheResponse?: boolean): any;
    loadLeaders(organId: string, callback: Function, options?: any, cacheResponse?: boolean): void;
    leaderCreateOrUpdate(data: DictionaryData, callback: Function, options?: any): void;
    leaderRemove(data: DictionaryData, callback: Function, options?: any): void;
}
